<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://nminhquang380.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nminhquang380.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-19T22:40:39+00:00</updated><id>https://nminhquang380.github.io/feed.xml</id><title type="html">blank</title><subtitle># A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Something You Need to Know about Transformer</title><link href="https://nminhquang380.github.io/blog/2023/something-you-need-to-know-about-transformer/" rel="alternate" type="text/html" title="Something You Need to Know about Transformer"/><published>2023-09-24T05:22:22+00:00</published><updated>2023-09-24T05:22:22+00:00</updated><id>https://nminhquang380.github.io/blog/2023/something-you-need-to-know-about-transformer</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/something-you-need-to-know-about-transformer/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">You aren’t Lazy: Exploring a Lack of Motivation</title><link href="https://nminhquang380.github.io/blog/2023/lack-of-motivation/" rel="alternate" type="text/html" title="You aren’t Lazy: Exploring a Lack of Motivation"/><published>2023-09-22T01:35:00+00:00</published><updated>2023-09-22T01:35:00+00:00</updated><id>https://nminhquang380.github.io/blog/2023/lack-of-motivation</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/lack-of-motivation/"><![CDATA[<p>Laziness. It’s a word tossed around quite a bit. Why didn’t your neighbor cut their lawn? They’re lazy. Why is Carol’s car a mess? She’s lazy. Why haven’t you finished your term papers yet? You’re lazy.</p> <p>Okay. Wait.</p> <p>What even is laziness? Not wanting to do something? If your neighbor didn’t mow their lawn because they’ve been ill, are they lazy? What if Carol hasn’t cleaned her car because she’s working two jobs and using it as a sort of home away from home sometimes? Lazy?</p> <p>No.</p> <p>Yet, there are excuses for everything, and, indeed, we all at times do not feel up to doing things (and maybe don’t). For those who chronically struggle, however, the challenge is usually deeper than laziness. Here are some creatures that pose as laziness, and what you can do about them.</p> <h3 id="low-mood">Low Mood</h3> <p>Don’t feel like it? Maybe you don’t feel like much of anything. If you find it difficult to enjoy even the good things, it can be difficult to do the chores of life.</p> <h3 id="what-you-can-do">What You Can Do</h3> <p>If your low mood has been a one-off thing lasting less than two weeks, it might make sense first to take a step back. What’s bringing you down? Do you need time to grieve something, or is something missing from your life? Sometimes sadness is our mind’s way of letting us know something isn’t right. If it has been more than two weeks and there is no clear reason for your sadness, it may be worthwhile to reach out to a medical professional, such as your doctor. It could also be meaningful to seek counseling.</p> <h3 id="lost-motivationsense-of-direction">Lost Motivation/Sense of Direction</h3> <p>Maybe there doesn’t seem to be a point to what you are trying to do. You go to work every day at a job that has lost its glimmer. You’ve lost sight of your values and goals. You feel adrift.</p> <h3 id="what-you-can-do-1">What You Can Do</h3> <p>Knowing where you are headed, and what values you have is essential for life to feel meaningful. It’s very normal to lose sight of these things at times. This may be a good time to reach outside yourself. Talking with a friend, mentor, teacher, spiritual leader, or therapist can help you remember what matters to you. Taking notes of what matters to you, writing about what legacy you hope to leave, and/or doing things you enjoyed when you were younger are also ways to get back to you.</p> <h3 id="youre-a-perfectionist">You’re a Perfectionist</h3> <p>One of the best ways to put the brakes on finishing something is with perfectionism. This is ironic as many people use self-criticism in hopes of bolstering their performance. Perfectionism creates a fear that is quite demoralizing making it tough to bounce back from imperfections fueling procrastination and giving up.</p> <h3 id="what-you-can-do-2">What You Can Do</h3> <p>Notice your critical voice. Have compassion for the difficulties you are experiencing, and practice introducing a kind voice. Moving toward compassionate self-talk when you’ve been beating yourself up over any perceived mistake takes time. You may always tend to notice the little mistakes. Still, compassionate self-talk can take away their paralyzing nature.</p> <h3 id="youre-struggling-with-executive-functioning">You’re Struggling with Executive Functioning</h3> <p>Maybe you don’t know where to start. Or you find yourself starting so many things at once that it’s hard to keep track. You might find it difficult to focus for long periods, and just when you are about to get to project you realize that you lost the tools you need.</p> <h3 id="what-you-can-do-3">What You Can Do</h3> <p>Executive functioning difficulties are extremely common, especially for neurodivergent people. If you are having difficulties with planning, focusing or sticking with a task this is a good time to first be kind to yourself. Virtual and physical tools such as planners, executive functioning apps, or visuals can be helpful. Finding someone to body double, or do a similar task along side you can also help. Lastly, meeting with a therapist can help keep you on track and discover which organizational strategieswork best for you.</p> <h3 id="youre-lonely">You’re Lonely</h3> <p>We are social beings. We need to feel some sense of connection. When this need is not met, it is painful and a strong force against motivation</p> <h3 id="what-you-can-do-4">What You Can Do</h3> <p>Have you been isolating? Are there old friends and/or family you can reach out to? This is often a good place to start. Re-connecting with old friends can help you to rebuild your social network. If you are having difficulty thinking of anyone to reach out to, consider the people you might know on a casual basis such as neighbors and coworkers. Would you be open to building up some of those relationships? If not, maybe it’s time to seek out some new places to meet people such as a community organization.</p> <h3 id="low-energy">Low Energy</h3> <p>Maybe you’re tired. Even if you are getting enough sleep. Low energy can make doing things feel much harder.</p> <h3 id="what-you-can-do-5">What You Can Do</h3> <p>A first step is to reach out to your doctor. There are several physical causes for low energy such as illness or medication side effects. If those have been addressed, a new space to look at could be your sleep patterns. Do you have a set routine or does your sleep schedule vary wildly? You might also consider when your energy is highest and try to schedule your activities at that time.</p> <h3 id="closing">Closing</h3> <p>All in all, there are many reasons people stop doing things. Laziness is not a helpful descriptor. Determining what is behind your lack of wanting to do things is the first step to working through things.</p> <h3 id="reference">Reference</h3> <p>https://www-psychologytoday-com.cdn.ampproject.org/v/s/www.psychologytoday.com/au/blog/beyond-mental-health/202309/you-arent-lazy-exploring-a-lack-of-motivation?amp=&amp;amp_gsa=1&amp;amp_js_v=a9&amp;usqp=mq331AQGsAEggAID#amp_tf=From%20%251%24s&amp;aoh=16943871139117&amp;csi=0&amp;referrer=https%3A%2F%2Fwww.google.com&amp;ampshare=https%3A%2F%2Fwww.psychologytoday.com%2Fau%2Fblog%2Fbeyond-mental-health%2F202309%2Fyou-arent-lazy-exploring-a-lack-of-motivation</p>]]></content><author><name></name></author><category term="machinelearning"/><summary type="html"><![CDATA[Laziness. It’s a word tossed around quite a bit. Why didn’t your neighbor cut their lawn? They’re lazy. Why is Carol’s car a mess? She’s lazy. Why haven’t you finished your term papers yet? You’re lazy.]]></summary></entry><entry><title type="html">Get lost when trying to build a Data Science Project</title><link href="https://nminhquang380.github.io/blog/2023/build-ds-project/" rel="alternate" type="text/html" title="Get lost when trying to build a Data Science Project"/><published>2023-09-07T10:35:00+00:00</published><updated>2023-09-07T10:35:00+00:00</updated><id>https://nminhquang380.github.io/blog/2023/build-ds-project</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/build-ds-project/"><![CDATA[<h3 id="disclaimer">Disclaimer</h3> <p>Currently I am lost in Data Science where there are a lot of concepts, technique and skills I should learn. Additionally, next year I will graduate so I should prepare something to get a job, especially in Australia which have a roughly competitive work market. Thus I try to build some DS projects, however, I got some issues, and this article helps me a lot, let me share it!</p> <hr/> <h2 id="how-to-build-a-data-science-project-from-scratch">How to build a data science project from scratch</h2> <p>There are many online courses about data science and machine learning that will guide you through a theory and provide you with some code examples and an analysis of very clean data.</p> <p>However, in order to start practising data science, it is better if you challenge a real-life problem. Digging into the data in order to find deeper insights. Carrying out feature engineering using additional sources of data and building stand-alone machine learning pipelines.</p> <p>This blog post will guide you through the main steps of building a data science project from scratch. It is based on a real-life problem — what are the main drivers of rental prices in Berlin? It will provide an analysis of this situation. It will also highlight the common mistake beginners tend to make when it comes to machine learning.</p> <p>These are the steps that will be discussed in detail:</p> <ul> <li>finding a topic</li> <li>extracting data from the web and cleaning it</li> <li>gaining deeper insights</li> <li>engineering of features using external APIs</li> <li>common mistakes while carrying out machine learning</li> <li>feature importance: finding the drivers of rental prices</li> <li>building machine learning models.</li> </ul> <h3 id="finding-a-topic">Finding a topic</h3> <p>There are many problems that can be solved by analyzing data, but it is always better to find a problem that you are interested in and that will motivate you. While searching for a topic, you should definitely concentrate on your preferences and interests.</p> <p>For instance, if you are interested in healthcare systems, there are many angles from which you could challenge the data provided on that topic. “Exploring the ChestXray14 dataset: problems” is an example of how to question the quality of medical data. Another example — if you are interested in music, you could try to predict the genre of the song from its audio.</p> <p>However, I suggest not only to concentrate on your interests but also to listen to what people around you are talking about. What bothers them? What are they complaining about? This can be another good source of ideas for a data science project. In those cases where people are still complaining about it, this may mean that the problem wasn’t solved properly the first time around. Thus, if you challenge it with data, you could provide an even better solution and have an impact in how this topic is perceived.</p> <p>This may all sound a bit too abstract, so lets find out how I came up with the idea to analyze Berlin rental prices.</p> <blockquote> <p>“If I had known that the rental prices were so high here, I would have negotiated for a higher salary.”</p> </blockquote> <p>This is just one of the things I heard from people who had recently moved to Berlin for work. Most newcomers complained that they hadn’t imagined Berlin to be so expensive, and that there were no statistics about possible price ranges of the apartment. If they had known this it beforehand, they could have asked for a higher salary during the job application process or could have considered other options.</p> <p>I googled, checked several rental apartment websites, and asked several people, but could not find any plausible statistics or visualizations of the current market prices. And this was how I came up with the idea of this analysis.</p> <p>I wanted to gather the data, build an interactive dashboard where you could select different options such as a 40m2 apartment situated in Berlin Mitte with a balcony and equipped kitchen, and it would show you the price ranges. This, alone, would help people understand apartment prices in Berlin. Also, by applying machine learning, I would be able to identify the drivers of the rental prices and practice with different machine learning algorithms.</p> <h3 id="extracting-data-from-the-web-and-cleaning-it">Extracting data from the web and cleaning it</h3> <h4 id="getting-the-data">Getting the data</h4> <p>Now that you have an idea about your data science project, you can start looking for the data. There are tons of amazing data repositories, such as Kaggle, UCI ML Repository or dataset search engines, and websites containing academic papers with datasets. Alternatively, you could use web scraping.</p> <p>But be cautious — old data is everywhere. When I was searching for the information about the rental prices in Berlin, I found many visualizations but they were old, or without any year specified.</p> <p>For some statistics, they even had a note saying that this price would only be for a 2 room apartment of 50 m2 without furniture. But what if I am searching for a smaller apartment with a furnished kitchen?</p> <p>As I could find only old data, I decided to <a href="https://hackernoon.com/web-scraping-tutorial-with-python-tips-and-tricks-db070e70e071">web scrape</a> the websites that offered rental apartments. Web scraping is a technique used to extract data from websites through an automated process.</p> <p>Here are the main findings:</p> <ul> <li>Before scraping, check if there is a public API available</li> <li>Be kind! Don’t overload the website by sending hundreds of requests per second</li> <li>Save the date when the extraction took place. It will be explained why this is important.</li> </ul> <h4 id="data-cleaning">Data cleaning</h4> <p>Once you starting getting the data, it is very important to have a look at it as early as possible in order to find any possible issues.</p> <p>While web scraping rental data, I included some small checks such as the number of missing values for all features. Web-masters could change the HTML of the website, which would result in my program not getting the data anymore.</p> <p>Once I had ensured that all technical aspects of web scraping were covered, I thought the data would almost be ideal. However, I ended up cleaning the data for around a week because of not so obvious duplicates.</p> <p>Once you starting getting the data, it is very important to have a look at it as early as possible in order to find any possible issues. For instance, if you web scrape, you could have missed some important fields. If you use a comma separator while saving data into a file, and one of the fields also contains commas, you can end up having files which are not separated very well.</p> <p>There were several sources of duplicates:</p> <ul> <li>Duplicated apartments because they had been online for a while</li> <li>Agencies had input errors, for example the rental price or the storey of the apartment. They would correct them after a while, or would publish a completely new ad with corrected values and additional description modifications</li> <li>Some prices were changed (increased and decreased) after a month for the same apartment</li> </ul> <p>While the duplicates from the first case were easy to identify by their ID, the duplicates from the second case were very complicated. The reason is that an agency could slightly change a description, modify the wrong price, and publish it as a new ad so that the ID would also be new.</p> <p>I had to come up with many logic-based rules to filter out the old versions of the ads. Once I was able to identify that these apartments would be the actual duplicates but with slight modifications, I could sort them by the extraction date, taking the latest one as the most recent.</p> <p>Additionally, some agencies would increase or decrease the price for the same apartment after a month. I was told that if nobody wanted this apartment, the price would decrease. Conversely, I was told that, if there were so many requests for it, that the agencies increased the price. These sounds like good explanations.</p> <h4 id="gaining-deeper-insights">Gaining deeper insights</h4> <p>Now that we have everything ready, we can start analyzing the data. I know data scientists love <code class="language-plaintext highlighter-rouge">seaborn</code> and <code class="language-plaintext highlighter-rouge">ggplot2</code>, as well as many static visualizations from which they can derive some insights.</p> <p>However, interactive dashboards can help you and other stakeholders to find useful insights. There are many amazing easy-to-use tools for that, such as <code class="language-plaintext highlighter-rouge">Tableau</code> and <code class="language-plaintext highlighter-rouge">Microstrategy</code>.</p> <p>It took me less than 30 minutes to create an interactive dashboard where one can select all the important components and see how the price would change.</p> <p>A fairly simple dashboard could already provide insights into the prices in Berlin for newcomers and could be a good user driver for a rental apartment website.</p> <p>Already from this data visualization you can see that the price distribution of 2.5 rooms falls into the distribution of 2 room apartment. The reason for this is that most of the 2.5 room apartments aren’t situated in the center of the city which, of course, reduces the price.</p> <p>This data was gathered in winter 2017/18 and it will also get outdated. However, my point is that the rental websites could frequently update their statistics and visualizations to provide more transparency to this question.</p> <h4 id="engineering-of-features-using-external-apis">Engineering of features using external APIs</h4> <p>Visualization helps you to identify important attributes, or “features,” that could be used by these machine learning algorithms. If the features you use are very uninformative, any algorithm will produce bad predictions. With very strong features, even a very simple algorithm can produce pretty decent results.</p> <p>In the rental price project, price is a continuous variable, so it is a typical regression problem. Taking all extracted information, I collected the following features in order to be able to predict a rental price.</p> <p>However, there was one feature that was problematic, namely the address. There were 6.6K apartments and around 4.4K unique addresses of different granularity. There were around 200 unique postcodes which could be converted into the dummy variables but then very precious information of a particular location would be lost.</p> <p><strong>What do you do when you are given a new address?</strong> &lt;/br&gt; You either google where it is or how to get there.</p> <p>By using an external API following the four additional features given, the apartment’s address could be calculated:</p> <ol> <li>duration of a train trip to the S-Bahn Friedrichstrasse (central station)</li> <li> <p>distance to U-Bahn Stadtmitte (city center) by car</p> </li> <li> <p>duration of a walking trip to the nearest metro station</p> </li> <li>number of metro stations within one kilometer from the apartment</li> </ol> <p>These four features boosted the performance significantly.</p> <p><strong>Common mistakes when carrying out machine learning and data science</strong> After scraping or getting the data, there are many steps to accomplish before applying a machine learning model.</p> <p>You need to visualize each of the variables to see distributions, find the outliers, and understand why there are such outliers.</p> <p>What can you do with missing values in certain features?</p> <p>What would be the best way to convert categorical features into numerical ones?</p> <p>There are many such questions, but I will give some details on the ones where the majority of beginners encounter mistakes.</p> <h4 id="1-visualization">1. Visualization</h4> <p>Firstly, you should visualize the distribution of the continuous features to get a feeling if there are many outliers, what the distribution would be, and if it makes sense.</p> <p>There are many ways to visualize it, for example box plots, histograms, cumulative distribution functions, and violin plots. However, one should pick the plot that will give the most information about the data.</p> <p>To see the distribution (if it is normal, or bimodal), the histograms will be the most helpful. Although histograms are a good starting point, the box plots might be superior in identifying the number of outliers and seeing where the median quartiles lie.</p> <p>Based on the plots, the most interesting question would be: do you see what you expected to see? Answering this question will help you either in finding insights or finding bugs in the data.</p> <p>To get inspired and understand what plot will give the most value, I frequently referred to the Python’s <code class="language-plaintext highlighter-rouge">seaborn</code> gallery. Another good source of inspiration for the visualization and finding insights are kernels on <code class="language-plaintext highlighter-rouge">Kaggle</code>. Here is my <code class="language-plaintext highlighter-rouge">kaggle</code> kernel of the in-depth visualization of the titanic dataset.</p> <p>In the context of rental prices, I plotted the histograms of each continuous feature and expected to see a long right tail in the distribution of the rent without bills and total area.</p> <p>Box plots helped me see the number of outliers for each of the features. In fact, most of the outliers apartments based on the rent without bills were either the ateliers for the small shops with more than 200m2 or the student dormitories with very low rent.</p> <h4 id="2-do-i-impute-the-values-based-on-the-whole-dataset">2. Do I impute the values based on the whole dataset?</h4> <p>Sometimes there will be missing values, due to various reasons. If we exclude every observation with at least one missing value, we can end up with a very reduced dataset.</p> <p>There are many ways of imputing the values, mean, or median. It is up to you how to do it but make sure to calculate the imputation statistics only on the training data to avoid data leakage of your test set.</p> <p>In the rental data, I also extracted a description of the apartment. Whenever the quality, condition, or type of apartment was missing, I would impute it from the description if the description contained this information.</p> <h4 id="3-how-do-i-transform-categorical-variables">3. How do I transform categorical variables?</h4> <p>Some algorithms, depending on the implementation, wouldn’t work directly with the categorical data, so one would need to somehow transform them into numerical values.</p> <p>There are many ways of transforming categorical variables into numerical features, such as Label Encoder, One Hot Encoding, bin encoding, and hashing encoding. However, most people use the Label Encoding incorrectly when the One Hot Encoding should have been used instead.</p> <p>Assume, in our rental data, that we have an apartment-type column with the following values: [ground floor, loft, maisonette, loft, loft, ground floor]. LabelEncoder can turn this into [3,2,1,2,2,1], introducing ordinality, which means that ground_floor &gt;loft &gt; maisonette. For some algorithms like decision trees, and its deviations, this type of encoding for this feature would be fine, but applying regressions and SVM might not make that much sense.</p> <h4 id="4-do-i-need-to-standardize-variables">4. Do I need to standardize variables?</h4> <p>Standardization brings all continuous variables to the same scale, meaning if one variable has values from 1K to 1M and another from 0.1 to 1, after standardization they will have the same range.</p> <p>L1 or L2 regularizations are the common way of reducing overfitting and can be used within many regression algorithms. However, it is important to apply feature standardization before L1 or L2.</p> <p>The rental price is in Euros so the fitted coefficient would be approximately 100 times larger than the fitted coefficient if the price was in cents. L1 and L2 penalize the larger coefficients more, meaning it will penalize the features in smaller scales more. To prevent this, the features should be standardized before applying L1 or L2.</p> <p>Another reason to standardize is that if you or the your algorithm use gradient descent, gradient descent converges much faster with feature scaling.</p> <h4 id="5-do-i-need-to-derive-the-logarithm-of-the-target-variable">5. Do I need to derive the logarithm of the target variable?</h4> <p>It took me a while to understand that there is no universal answer.</p> <p>It depends on many factors:</p> <p>whether you want fractional or absolute error which algorithm you use what residual plots and changes in the metrics tell you In regression, firstly pay attention to the residual plots and the metric. Sometimes the logarithmization of the target variable leads to a better model and the results of the model would still be easy to understand. However, there are still other transformations that could be of interest, such as to taking the square root.</p> <p>There are many answers on Stack Overflow regarding this question, and I think Residual Plots and RMSE on raw and log target variable explains it very well.</p> <p>For the rental data, I derived the logarithm of the price as the residual plots looked a bit better.</p> <h4 id="6-some-more-important-stuff">6. Some more important stuff</h4> <p>Some algorithms, such as regressions, will suffer from collinearities in the data because the coefficients become very unstable (more math). SVM might or might not suffer from collinearity due to the choice of kernel.</p> <p>Decision-based algorithms will not suffer from multicollinearity as they could use features interchangeably in different trees without it affecting the performance. However, the interpretation of feature importance then gets more difficult as the correlated variable may not appear to be as important as it is.</p> <h3 id="machine-learning">Machine Learning</h3> <p>After you have familiarized yourself with data and cleaned out the outliers, it is the perfect time to get the hang of machine learning. There are many algorithms you could use for this supervised machine learning.</p> <p>There were three different algorithms I wanted to explore, comparing characterstics such as performance differences and speed. These three were gradient boosted trees with different implementations (XGBoost and LightGMB), Random Forest (FR, scikit-learn) and 3-layer Neuronal Networks (NN, Tensorflow). I selected RMSLE (root mean squared logarithm error) to be the metric for the optimization of the process. I used RMSLE because I derived the logarithm of the target variable.</p> <p>XGBoost and LigthGBM performed comparably, RF slightly worse, whereas NN was the worst.</p> <p>Decision tree-based algorithms are very good at interpreting features. For example, they produce a feature importance score.</p> <h4 id="feature-importance-finding-the-drivers-of-the-rental-price">Feature importance: finding the drivers of the rental price</h4> <p>After fitting a decision tree-based model, you can see what features are the most valuable for the price prediction.</p> <p>Feature importance provides a score that indicates how informative each feature was in the construction of the decision trees within the model. One of the ways to calculate this score is to count how many times a feature is used to split the data across all trees. This score can be computed in different ways.</p> <p>Feature importance can reveal other insights about the main price drivers.</p> <p>For the rental price prediction, it isn’t surprising that total area is the most important driver of the price. Interestingly, some features that were engineered with external API are also in the top most important features.</p> <p>However, as mentioned in “Interpretable Machine Learning with XGBoost”, there can be inconsistencies in feature importance depending on the attribution option. The author of the linked blogpost, and SHAP NIPS paper, proposes a new way of calculating feature importance that will be both accurate and consistent. This uses the shap Python library. SHAP values represent the responsibility of a feature for a change in the model output.</p> <h4 id="ensemble-averaging">Ensemble averaging</h4> <p>After playing around with different models and comparing performance, you could just combine the results of each of the model and build an ensemble!</p> <p>Bagging is the machine learning ensemble model that utilizes the predictions of several algorithms to calculate the final aggregated predictions. It is designed to prevent overfitting and reduces the variance of the algorithms.</p> <p>As I already had predictions from the above mentioned algorithms, I combined all four models in all possible ways and picked the seven best single and ensemble models based on the RMSLE of the validation set.</p> <p>The ensemble of three decision-tree based algorithms performed the best compared to each single model.</p> <p>You could also produce a weighted ensemble, assigning more weight to a better single model. The reasoning behind it is that other models could overrule the best model only if they collectively agree on an alternative.</p> <p>In reality, one would never know if an averaged ensemble would be better than the single model without just trying it out.</p> <h4 id="stacked-models">Stacked models</h4> <p>An averaged or weighted ensemble is not the only way to combine the predictions of different models. You could also stack the models in very different ways!</p> <p>The idea behind stacked models is to create several base models and a meta model on top of the results from the base models in order to produce final predictions. However, it is not so obvious how to train the meta model because it can be biased towards the best of the base models. A very good explanation of how to do it correctly can be found in the post “Stacking models for improved predictions”.</p> <p>For the rental price case, stacked models didn’t improve the RMSLE at all — they even increased the metrics. There might be several reasons for this — either I coded it incorrectly ;) or there was just too much noise introduced by stacking.</p> <p>If you want to explore more of the ensemble and stacked model articles, the Kaggle Ensemble Guide explains many different kinds of ensembling with the performance comparison and referrals on how such stacked models got to the top of Kaggle’s competitions.</p> <h3 id="final-thoughts">Final thoughts</h3> <ul> <li>listen to what people talk about around you; their complaining can serve as a good starting point for solving something big</li> <li>let people find their own insights by providing interactive dashboards don’t restrict yourself to common feature engineering as multiplying two variables</li> <li>Try to find additional sources of data or explanations</li> <li>try out ensembles and stacked models as those methods could improve the performance</li> </ul> <p>And please, provide the date of the data you display!</p> <h3 id="reference">Reference</h3> <p>Kokatjuhha, J. (2020, March 19). How to build a data science project from scratch. We’ve Moved to FreeCodeCamp.org/News. https://medium.com/free-code-camp/how-to-build-a-data-science-project-from-scratch-dc4f096a62a1</p> <p>‌</p>]]></content><author><name></name></author><category term="datascience"/><summary type="html"><![CDATA[Disclaimer Currently I am lost in Data Science where there are a lot of concepts, technique and skills I should learn. Additionally, next year I will graduate so I should prepare something to get a job, especially in Australia which have a roughly competitive work market. Thus I try to build some DS projects, however, I got some issues, and this article helps me a lot, let me share it!]]></summary></entry><entry><title type="html">How to read a paper</title><link href="https://nminhquang380.github.io/blog/2023/how_to_read_a_paper/" rel="alternate" type="text/html" title="How to read a paper"/><published>2023-08-31T10:35:00+00:00</published><updated>2023-08-31T10:35:00+00:00</updated><id>https://nminhquang380.github.io/blog/2023/how_to_read_a_paper</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/how_to_read_a_paper/"><![CDATA[<h2 id="abstract">Abstract</h2> <p>Researchers spend a great deal of time reading research papers. However, this skill is rarely taught, leading to much wasted effort. This article outlines a practical and efficient three-pass method for reading research papers.</p> <p><strong>Categories and Subject Descriptors</strong>: A.1 [Introductory and Survey].</p> <p><strong>General Terms</strong>: Documentation.</p> <p><strong>Keywords</strong>: Paper, Reading, Hints.</p> <h2 id="introduction">Introduction</h2> <p><strong>Researchers must read papers</strong> for several reasons: to review them for a <strong>conference</strong> or a class, to keep current in their field, or for a literature survey of a new field. A typical researcher will likely spend hundreds of hours every year reading papers.</p> <p>Learning to efficiently read a paper is a critical but rarely taught skill. Beginning graduate students, therefore, must learn on their own using trial and error. Students waste much effort in the process and are frequently driven to frustration.</p> <p>For many years I have used <strong>a simple approach</strong> to efficiently read papers. This paper describes the <strong>‘three-pass’ approach</strong> and its use in doing a literature survey.</p> <h2 id="the-three-pass-approach">The three-pass approach</h2> <p>The key idea is that you should read the paper in up to <strong>three passes</strong>, instead of starting at the beginning and plowing your way to the end. <strong>Each pass accomplishes specific goals</strong> and builds upon the previous pass: The <em>first pass gives you a general idea about the paper</em>. <em>The second pass lets you grasp the paper’s content</em>, but not its details. <em>The third pass helps you understand the paper in depth.</em></p> <h3 id="the-first-pass">The first pass</h3> <p>The first pass is a quick scan to get a bird’s eye view of the paper. You can decide whether you need to do any more passes. This pass shoud take about 5 to 10 minutes and consists of the following steps:</p> <ol> <li>Carefully read the title, abstract, and introduction.</li> <li>Read the section and sub-section headings, but ignore everything else.</li> <li>Read the conclusion.</li> <li>Glance over the references, mentally ticking off the ones you’ve already read.</li> </ol> <p>At the end of the first pass, you should be able to answer the five questions:</p> <ol> <li><strong>Category:</strong> What type of paper is this? A measurement paper? An analysis of an existing system? A description of a research prototype?</li> <li><strong>Context:</strong> Which other papers is it related to? Which theoretical bases were used to analyze the problem?</li> <li><strong>Correctness:</strong> Do the assumptions appear to be valid?</li> <li><strong>Contributions:</strong> What are the paper’s main contributions?</li> <li><strong>Clarity:</strong> Is the paper well written?</li> </ol> <p>Using this information, you may <strong>choose not to read further</strong>. This could be because the paper doesn’t interest you, or you don’t know enough about the area to understand the paper, or that the authors <strong>make invalid assumptions</strong>. The first pass is adequate for papers that aren’t in your research area, but may someday prove relevant.</p> <p>Incidentally, when you write a paper, you can expect most reviewers (and readers) to make only one pass over it. Take care to choose coherent section and sub-section titles and to write concise and comprehensive abstracts. If a reviewer cannot understand the gist after one pass, the paper will likely be rejected; if a reader cannot understand the highlights of the paper after five minutes, the paper will likely never be read.</p> <h3 id="the-second-pass">The second pass</h3> <p>In the second pass, read the paper with <strong>greater care</strong>, but <strong>ignore details such as proofs</strong>. It helps to jot down the <strong>key points</strong>, or to make comments in the margins, as you read.</p> <ol> <li>Look carefully at the <strong>figures, diagrams and other illustrations</strong> in the paper. Pay special attention to <strong>graphs</strong>. Are the <strong>axes</strong> properly <strong>labeled</strong>? Are results shown with error bars, so that <strong>conclusions are statistically significant</strong>? Common mistakes like these will separate rushed, shoddy work from the truly excellent.</li> <li>Remember to <strong>mark relevant unread references</strong> for further reading (this is a good way to learn more about the background of the paper).</li> </ol> <p>The second pass should take up to <strong>an hour</strong>. After this pass, you should be able to <strong>grasp the content of the paper</strong>. You should be able to <strong>summarize the main thrust of the paper</strong>, with supporting evidence, to someone else. This level of detail is appropriate for a paper in which you are interested, but does not lie in your research speciality.</p> <p><strong>Sometimes you won’t understand a paper</strong> even at the <strong>end of the second pass</strong>. This may be <strong>because</strong> the subject matter is <strong>new to you</strong>, with unfamiliar terminology and acronyms. Or the authors may use a proof or experimental technique that you don’t understand, so that the bulk of the paper is incomprehensible. The paper may be poorly written with unsubstantiated assertions and numerous forward references. Or it could just be that it’s late at night and you’re tired. You can now choose to: <strong>(a) set the paper aside</strong>, hoping you don’t need to understand the material to be successful in your career, <strong>(b) return to the paper later</strong>, perhaps after reading background material or <strong>(c) persevere and go on to the third pass.</strong></p> <h3 id="the-third-pass">The third pass</h3> <p>To fully understand a paper, particularly if you are reviewer, requires a third pass. <strong>The key</strong> to the third pass is to <strong>attempt to virtually re-implement</strong> the paper: that is, making the same assumptions as the authors, <strong>re-create the work</strong>. By comparing this re-creation with the actual paper, you can easily identify not only a paper’s innovations, but also its hidden failings and assumptions.</p> <p>This pass requires <strong>great attention to detail</strong>. You should identify and challenge every assumption in every statement. Moreover, you should think about how you yourself would present a particular idea. This comparison of the actual with the virtual <strong>lends a sharp insight</strong> into the proof and presentation techniques in the paper and you can very likely add this to your repertoire of tools. During this pass, you should also jot down ideas for future work.</p> <p>This pass can take about <strong>four or five hours for beginners</strong>, and about an hour for an <strong>experienced reader</strong>. At the end of this pass, you should be able to <strong>reconstruct the entire structure of the paper from memory</strong>, as well as be able to identify its strong and weak points. In particular, you should be able to pinpoint implicit assumptions, missing citations to relevant work, and potential issues with experimental or analytical techniques.</p> <h2 id="references">References</h2> <p>[1] S. Keshav, “How to Read a Paper” (https://web.stanford.edu/class/ee384m/Handouts/HowtoReadPaper.pdf).</p>]]></content><author><name></name></author><category term="machinelearning"/><summary type="html"><![CDATA[Abstract Researchers spend a great deal of time reading research papers. However, this skill is rarely taught, leading to much wasted effort. This article outlines a practical and efficient three-pass method for reading research papers.]]></summary></entry><entry><title type="html">Basic Machine Learning Questions</title><link href="https://nminhquang380.github.io/blog/2023/basic_machine_question/" rel="alternate" type="text/html" title="Basic Machine Learning Questions"/><published>2023-08-31T10:35:00+00:00</published><updated>2023-08-31T10:35:00+00:00</updated><id>https://nminhquang380.github.io/blog/2023/basic_machine_question</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/basic_machine_question/"><![CDATA[<h1 id="basic-machine-learning-question">Basic Machine Learning Question</h1> <p>I collect these questions from Machine Interviews Question book with the author is Huyen Chip, one of my favorite authors, who has some famous books for the youth in Vietnam.</p> <p>By the way, this repository will be my working notebook. I will put somethings I learnt from School here, as well as some stuffs interested me.</p> <h1 id="questions-and-answers">Questions and Answers</h1> <p>There are a lot of questions which are represented in the book, but I will list questions that I have no idea about them before.</p> <ul> <li>Explain weakly supervised, unsupervised, supervised, semi-supervised, and active learning. <ul> <li>Weakly supervised learning uses partially labeled or noisy data to train a model.</li> <li>Active learning has the algorithm which is able to choose which data it wants (which is most informative) instead of being given a fixed set of data for training. This algorithm minimize the amount of labeled data required to achieve a desired level of accuracy.</li> </ul> </li> <li>Empirical risk minimization. <ul> <li>What’s the risk in empirical risk minimization?</li> <li>Why is it empirical?</li> <li>How do we minimize that risk?</li> </ul> </li> <li>Occam’s razor states that when the simple explanation and complex explanation both work equally well, the simple explanation is usually correct. How do we apply this principle in ML?</li> <li>What are the conditions that allowed deep learning to gain popularity in the last decade?</li> <li>If we have a wide NN and a deep NN with the same number of parameters, which one is more expressive and why?</li> <li>The Universal Approximation Theorem states that a neural network with 1 hidden layer can approximate any continuous function for inputs within a specific range. Then why can’t a simple neural network reach an arbitrarily small positive error?</li> <li>What are saddle points and local minima? Which are thought to cause more problems for training large NNs?</li> </ul> <h2 id="hyperparameters">Hyperparameters.</h2> <ul> <li>What are the differences between parameters and hyperparameters?</li> <li>Why is hyperparameter tuning important?</li> <li>Explain algorithm for tuning hyperparameters. <h2 id="classification-vs-regression">Classification vs. regression.</h2> </li> <li>What makes a classification problem different from a regression problem?</li> <li>Can a classification problem be turned into a regression problem and vice versa? <h2 id="parametric-vs-non-parametric-methods">Parametric vs. non-parametric methods.</h2> </li> <li>What’s the difference between parametric methods and non-parametric methods? Give an example of each method.</li> <li>When should we use one and when should we use the other?</li> <li>Why does ensembling independently trained models generally improve performance?</li> <li>Why does L1 regularization tend to lead to sparsity while L2 regularization pushes weights closer to 0?</li> <li>Why does an ML model’s performance degrade in production?</li> <li>What problems might we run into when deploying large machine learning models? <h2 id="realistic-problem">Realistic Problem</h2> <p><strong>Your model performs really well on the test set but poorly in production.</strong></p> </li> <li>What are your hypotheses about the causes?</li> <li>How do you validate whether your hypotheses are correct?</li> <li>Imagine your hypotheses about the causes are correct. What would you do to address them?</li> </ul>]]></content><author><name></name></author><category term="machinelearning"/><summary type="html"><![CDATA[Basic Machine Learning Question I collect these questions from Machine Interviews Question book with the author is Huyen Chip, one of my favorite authors, who has some famous books for the youth in Vietnam.]]></summary></entry><entry><title type="html">Error and Exception in Python</title><link href="https://nminhquang380.github.io/blog/2023/error_exception_python/" rel="alternate" type="text/html" title="Error and Exception in Python"/><published>2023-08-31T10:35:00+00:00</published><updated>2023-08-31T10:35:00+00:00</updated><id>https://nminhquang380.github.io/blog/2023/error_exception_python</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/error_exception_python/"><![CDATA[<p>As one of the dullest fools among software developers club, I was aware of Exceptions recently though I have writen many Exception codelines in some languages. It sounds impossible, right?</p> <p>Yeah, I agree. But if you know my story, it would be understandable.</p> <p>Ha! Sorry, it’s not story-telling time, come to our topic: <strong>Errors and Exceptions</strong>.</p> <p>I found an easy and simple tutorial in this <a href="https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions">link</a>. Hopefully, you find it helpful!!</p> <blockquote> <blockquote> <p>Until now error messages haven’t been more than mentioned, but if you have tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.</p> </blockquote> </blockquote> <h2 id="1-syntax-errors">1. Syntax Errors</h2> <p>Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python and any languages.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="bp">True</span> <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Hello world</span><span class="sh">'</span><span class="p">)</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="bp">True</span> <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Hello world</span><span class="sh">'</span><span class="p">)</span>
                   <span class="o">^</span>
<span class="nb">SyntaxError</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">syntax</span>
</code></pre></div></div> <p>The parser repeats the offending line and displays a little ‘arrow’ pointing at the earliest point in the line where the error was detected. The error is caused by (or at least detected at) the token preceding the arrow: in the example, the error is detected at the function print(), since a colon (‘:’) is missing before it. File name and line number are printed so you know where to look in case the input came from a script.</p> <h2 id="2-exceptions">2. Exceptions</h2> <p>Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal: you will soon learn how to handle them in Python programs. Most exceptions are not handled by programs, however, and result in error messages as shown here:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">10</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span>
<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">ZeroDivisionError</span><span class="p">:</span> <span class="n">division</span> <span class="n">by</span> <span class="n">zero</span>

<span class="mi">4</span> <span class="o">+</span> <span class="n">spam</span><span class="o">*</span><span class="mi">3</span>
<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="sh">'</span><span class="s">spam</span><span class="sh">'</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>

<span class="sh">'</span><span class="s">2</span><span class="sh">'</span> <span class="o">+</span> <span class="mi">2</span>
<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">can</span> <span class="n">only</span> <span class="n">concatenate</span> <span class="nf">str </span><span class="p">(</span><span class="ow">not</span> <span class="sh">"</span><span class="s">int</span><span class="sh">"</span><span class="p">)</span> <span class="n">to</span> <span class="nb">str</span>
</code></pre></div></div> <p>The last line of the error message indicates what happened. Exceptions come in different types, and the type is printed as part of the message: the types in the example are <code class="language-plaintext highlighter-rouge">ZeroDivisionError</code>, <code class="language-plaintext highlighter-rouge">NameError</code> and <code class="language-plaintext highlighter-rouge">TypeError.</code> The string printed as the exception type is the name of the built-in exception that occurred. This is true for all built-in exceptions, but need not be true for user-defined exceptions (although it is a useful convention). Standard exception names are built-in identifiers (not reserved keywords).</p> <p>Built-in Exceptions lists the built-in exceptions and their meanings.</p> <h2 id="3-handling-exceptions">3. Handling Exceptions</h2> <p>It is possible to write programs that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using Control-C or whatever the operating system supports); note that a user-generated interruption is signalled by raising the KeyboardInterrupt exception.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Please enter a number: </span><span class="sh">"</span><span class="p">))</span>
        <span class="k">break</span>
    <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">What a fool! Do you know what is a number? Do it again!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">try</code> statement works as follows.</p> <ul> <li>First, the try clause (the statement(s) between the try and except keywords) is executed.</li> <li>If no exception occurs, the except clause is skipped and execution of the try statement is finished.</li> <li>If an exception occurs during execution of the try clause, the rest of the clause is skipped. Then, if its type matches the exception named after the except keyword, the except clause is executed, and then execution continues after the try/except block.</li> <li>If an exception occurs which does not match the exception named in the except clause, it is passed on to outer try statements; if no handler is found, it is an unhandled exception and execution stops with a message as shown above.</li> </ul> <p>A <code class="language-plaintext highlighter-rouge">try</code> statement may have more than one except clause, to specify handlers for different exceptions. At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding <code class="language-plaintext highlighter-rouge">try</code> clause, not in other handlers of the same try statement. An except clause may name multiple exceptions as a parenthesized tuple, for example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">except </span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">,</span> <span class="nb">TypeError</span><span class="p">,</span> <span class="nb">NameError</span><span class="p">):</span>
    <span class="k">pass</span>
</code></pre></div></div> <p>A class in an except clause is compatible with an exception if it is the same class or a base class thereof (but not the other way around — an except clause listing a derived class is not compatible with a base class). For example, the following code will print B, C, D in that order:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">D</span><span class="p">(</span><span class="n">C</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">for</span> <span class="n">cls</span> <span class="ow">in</span> <span class="p">[</span><span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nf">cls</span><span class="p">()</span>
    <span class="k">except</span> <span class="n">D</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">D</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">C</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">B</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>Note that if the except clauses were reversed (with except B first), it would have printed B, B, B — the first matching except clause is triggered.</p> <p>When an exception occurs, it may have associated values, also known as the exception’s arguments. The presence and types of the arguments depend on the exception type.</p> <p>The except clause may specify a variable after the exception name. The variable is bound to the exception instance which typically has an args attribute that stores the arguments. For convenience, builtin exception types define <strong>str</strong>() to print all the arguments without explicitly accessing .args.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nc">Exception</span><span class="p">(</span><span class="sh">'</span><span class="s">spam</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">eggs</span><span class="sh">'</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">inst</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">inst</span><span class="p">))</span>    <span class="c1"># the exception type
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">inst</span><span class="p">.</span><span class="n">args</span><span class="p">)</span>     <span class="c1"># arguments stored in .args
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">inst</span><span class="p">)</span>          <span class="c1"># __str__ allows args to be printed directly,
</span>                         <span class="c1"># but may be overridden in exception subclasses
</span>    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">inst</span><span class="p">.</span><span class="n">args</span>     <span class="c1"># unpack args
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">x =</span><span class="sh">'</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">y =</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div></div> <p>The exception’s <strong>str</strong>() output is printed as the last part (‘detail’) of the message for unhandled exceptions.</p> <p><code class="language-plaintext highlighter-rouge">BaseException</code> is the common base class of all exceptions. One of its subclasses, <code class="language-plaintext highlighter-rouge">Exception</code>, is the base class of all the non-fatal exceptions. Exceptions which are not subclasses of <code class="language-plaintext highlighter-rouge">Exception</code> are not typically handled, because they are used to indicate that the program should terminate. They include <code class="language-plaintext highlighter-rouge">SystemExit</code> which is raised by <code class="language-plaintext highlighter-rouge">sys.exit()</code> and <code class="language-plaintext highlighter-rouge">KeyboardInterrupt</code> which is raised when a user wishes to interrupt the program.</p> <p><code class="language-plaintext highlighter-rouge">Exception</code> can be used as a wildcard that catches (almost) everything. However, it is good practice to be as specific as possible with the types of exceptions that we intend to handle, and to allow any unexpected exceptions to propagate on.</p> <p>The most common pattern for handling <code class="language-plaintext highlighter-rouge">Exception</code> is to print or log the exception and then re-raise it (allowing a caller to handle the exception as well):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">f</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">myfile.txt</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">readline</span><span class="p">()</span>
    <span class="n">i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span>
<span class="k">except</span> <span class="nb">OSError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">OSError: </span><span class="sh">'</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Could not convert data to an integer.</span><span class="sh">'</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Unexpected </span><span class="si">{</span><span class="n">err</span><span class="o">=</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="o">=</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">raise</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">try</code> … <code class="language-plaintext highlighter-rouge">except</code> statement has an optional else clause, which, when present, must follow all except clauses. It is useful for code that must be executed if the try clause does not raise an exception. For example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">OSError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">cannot open</span><span class="sh">'</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="sh">'</span><span class="s">has</span><span class="sh">'</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()),</span> <span class="sh">'</span><span class="s">lines</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div> <p>The use of the <code class="language-plaintext highlighter-rouge">else</code> clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the <code class="language-plaintext highlighter-rouge">try</code> … <code class="language-plaintext highlighter-rouge">except</code> statement.</p> <p>Exception handlers do not handle only exceptions that occur immediately in the try clause, but also those that occur inside functions that are called (even indirectly) in the try clause. For example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">this_fails</span><span class="p">():</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
<span class="k">try</span><span class="p">:</span>
    <span class="nf">this_fails</span><span class="p">()</span>
<span class="k">except</span> <span class="nb">ZeroDivisionError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Handling run-time error: </span><span class="sh">'</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
</code></pre></div></div> <h2 id="4-raising-exceptions">4. Raising Exceptions</h2> <p>The raise statement allows the programmer to force a specified exception to occur. For example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">raise</span> <span class="nc">NameError</span><span class="p">(</span><span class="sh">'</span><span class="s">HiThere</span><span class="sh">'</span><span class="p">)</span>
<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">NameError</span><span class="p">:</span> <span class="n">HiThere</span>
</code></pre></div></div> <p>The sole argument to raise indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from BaseException, such as Exception or one of its subclasses). If an exception class is passed, it will be implicitly instantiated by calling its constructor with no arguments:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">raise</span> <span class="nb">ValueError</span>
</code></pre></div></div> <p>If you need to determine whether an exception was raised but don’t intend to handle it, a simpler form of the raise statement allows you to re-reaise the exception:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nc">NameError</span><span class="p">(</span><span class="sh">'</span><span class="s">HiThere</span><span class="sh">'</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">NameError</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">An exception flew by!</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">raise</span>
</code></pre></div></div> <h2 id="5-exception-chaining">5. Exception Chaining</h2> <p>If an unhandled exception occurs inside an except section, it will have the exception being handled attached to it and included in the error message:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">database.sqlite</span><span class="sh">"</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">OSError</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sh">"</span><span class="s">unable to handle error</span><span class="sh">"</span><span class="p">)</span>

<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">FileNotFoundError</span><span class="p">:</span> <span class="p">[</span><span class="n">Errno</span> <span class="mi">2</span><span class="p">]</span> <span class="n">No</span> <span class="n">such</span> <span class="nb">file</span> <span class="ow">or</span> <span class="n">directory</span><span class="p">:</span> <span class="sh">'</span><span class="s">database.sqlite</span><span class="sh">'</span>

<span class="n">During</span> <span class="n">handling</span> <span class="n">of</span> <span class="n">the</span> <span class="n">above</span> <span class="n">exception</span><span class="p">,</span> <span class="n">another</span> <span class="n">exception</span> <span class="n">occurred</span><span class="p">:</span>

<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">4</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">RuntimeError</span><span class="p">:</span> <span class="n">unable</span> <span class="n">to</span> <span class="n">handle</span> <span class="n">error</span>
</code></pre></div></div> <p>To indicate that an exception is a direct consequence of another, the raise statement allows an optional from clause:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">raise</span> <span class="nb">RuntimeError</span> <span class="k">from</span> <span class="n">exc</span>
</code></pre></div></div> <p>This can be useful when you are transforming exceptions. For example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
    <span class="k">raise</span> <span class="nb">ConnectionError</span>
<span class="k">try</span><span class="p">:</span>
    <span class="nf">func</span><span class="p">()</span>
<span class="k">except</span> <span class="n">Connection</span> <span class="k">as</span> <span class="n">exc</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sh">'</span><span class="s">Fail to open database</span><span class="sh">'</span><span class="p">)</span> <span class="k">from</span> <span class="n">exc</span>

<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="n">func</span>
<span class="nb">ConnectionError</span>

<span class="n">The</span> <span class="n">above</span> <span class="n">exception</span> <span class="n">was</span> <span class="n">the</span> <span class="n">direct</span> <span class="n">cause</span> <span class="n">of</span> <span class="n">the</span> <span class="n">following</span> <span class="n">exception</span><span class="p">:</span>

<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">4</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">RuntimeError</span><span class="p">:</span> <span class="n">Failed</span> <span class="n">to</span> <span class="nb">open</span> <span class="n">database</span>
</code></pre></div></div> <p>It allows disabling automatic exception chaining using the from None idiom:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">database.sqlite</span><span class="sh">'</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">OSError</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nb">RuntimeError</span> <span class="k">from</span> <span class="bp">None</span>

<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">4</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">RuntimeError</span>
</code></pre></div></div> <h2 id="6-user-defined-exceptions">6. User-defined Exceptions</h2> <p>Programs may name their own exceptions by creating a new exception class (see Classes for more about Python classes). Exceptions should typically be derived from the Exception class, either directly or indirectly.</p> <p>Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception.</p> <p>Most exceptions are defined with names that end in “Error”, similar to the naming of the standard exceptions.</p> <p>Many standard modules define their own exceptions to report errors that may occur in functions they define.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">InvalidInputError</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">message</span> <span class="o">=</span> <span class="n">message</span>

<span class="k">def</span> <span class="nf">process_input</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">InvalidInputError</span><span class="p">(</span><span class="sh">"</span><span class="s">Invalid input! Expected an integer.</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Process the input value here...
</span>
<span class="c1"># Example usage
</span><span class="k">try</span><span class="p">:</span>
    <span class="n">user_input</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter an integer: </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">process_input</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>
<span class="k">except</span> <span class="n">InvalidInputError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Error:</span><span class="sh">"</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">message</span><span class="p">)</span>
</code></pre></div></div> <h2 id="7-defining-clean-up-actions">7. Defining Clean-up Actions</h2> <p>The <code class="language-plaintext highlighter-rouge">try</code> statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances. For example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nb">KeyboardInterrupt</span>
<span class="k">finally</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Let</span><span class="sh">''</span><span class="s">s drink beer!</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>If a <code class="language-plaintext highlighter-rouge">finally</code> clause is present, the <code class="language-plaintext highlighter-rouge">finally</code> clause will execute as the last task before the <code class="language-plaintext highlighter-rouge">try</code> statement completes. The finally clause runs whether or not the try statement produces an exception. The following points discuss more complex cases when an exception occurs:</p> <ul> <li>If an exception occurs during execution of the <code class="language-plaintext highlighter-rouge">try</code> clause, the exception may be handled by an except clause. If the exception is not handled by an except clause, the exception is re-raised <strong>after</strong> the <code class="language-plaintext highlighter-rouge">finally</code> clause has been executed.</li> <li>An exception could occur during execution of an <code class="language-plaintext highlighter-rouge">except</code> or <code class="language-plaintext highlighter-rouge">else</code> clause. Again, the exception is re-raised <strong>after</strong> the <code class="language-plaintext highlighter-rouge">finally</code> clause has been executed.</li> <li>If the <code class="language-plaintext highlighter-rouge">finally</code> clause executes a <code class="language-plaintext highlighter-rouge">break</code>, continue or return statement, <strong>exceptions are not re-raised</strong>.</li> <li>If the <code class="language-plaintext highlighter-rouge">try</code> statement reaches a <code class="language-plaintext highlighter-rouge">break</code>, continue or return statement, the finally clause will <code class="language-plaintext highlighter-rouge">execute</code> just <strong>prior to the break</strong>, continue or return statement’s execution.</li> <li>If a <code class="language-plaintext highlighter-rouge">finally</code> clause includes a <code class="language-plaintext highlighter-rouge">return</code> statement, <strong>the returned value will be the one from the finally clause’s return statement, not the value from the try clause’s return statement.</strong></li> </ul> <p>For example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bool_return</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>

<span class="nf">bool_return</span><span class="p">()</span>

<span class="c1"># False
</span></code></pre></div></div> <p>A more complicated example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">divide</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>
    <span class="k">except</span> <span class="nb">ZeroDivisionError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">division by zero!</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">result is</span><span class="sh">"</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">executing finally clause</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">divide</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">result</span> <span class="ow">is</span> <span class="mf">2.0</span>
<span class="n">executing</span> <span class="k">finally</span> <span class="n">clause</span>
<span class="nf">divide</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">division</span> <span class="n">by</span> <span class="n">zero</span><span class="err">!</span>
<span class="n">executing</span> <span class="k">finally</span> <span class="n">clause</span>
<span class="nf">divide</span><span class="p">(</span><span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)</span>
<span class="n">executing</span> <span class="k">finally</span> <span class="n">clause</span>
<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span><span class="p">,</span> <span class="ow">in</span> <span class="n">divide</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">unsupported</span> <span class="n">operand</span> <span class="nf">type</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="o">/</span><span class="p">:</span> <span class="sh">'</span><span class="s">str</span><span class="sh">'</span> <span class="ow">and</span> <span class="sh">'</span><span class="s">str</span><span class="sh">'</span>
</code></pre></div></div> <h2 id="8-predefined-clean-up-actions">8. Predefined Clean-up Actions</h2> <p>Some objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a file and print its contents to the screen.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">myfile.txt</span><span class="sh">"</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
</code></pre></div></div> <p>The problem with this code is that it leaves the file open for an indeterminate amount of time after this part of the code has finished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The with statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">myfile.txt</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
</code></pre></div></div> <p>After the statement is executed, the file f is always closed, even if a problem was encountered while processing the lines. Objects which, like files, provide predefined clean-up actions will indicate this in their documentation.</p> <h2 id="9-raising-and-handling-multiple-unrelated-exceptions">9. Raising and Handling Multiple Unrelated Exceptions</h2> <p>There are situations where it is necessary to report several exceptions that have occurred. This is often the case in concurrency frameworks, when several tasks may have failed in parallel, but there are also other use cases where it is desirable to continue execution and collect multiple errors rather than raise the first exception.</p> <p>The builtin ExceptionGroup wraps a list of exception instances so that they can be raised together. It is an exception itself, so it can be caught like any other exception.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
    <span class="n">excs</span> <span class="o">=</span> <span class="p">[</span><span class="nc">OSError</span><span class="p">(</span><span class="sh">'</span><span class="s">error 1</span><span class="sh">'</span><span class="p">),</span> <span class="nc">SystemError</span><span class="p">(</span><span class="sh">'</span><span class="s">error 2</span><span class="sh">'</span><span class="p">)]</span>
    <span class="k">raise</span> <span class="nc">ExceptionGroup</span><span class="p">(</span><span class="sh">'</span><span class="s">there were problems</span><span class="sh">'</span><span class="p">,</span> <span class="n">excs</span><span class="p">)</span>

<span class="nf">f</span><span class="p">()</span>

  <span class="o">+</span> <span class="nb">Exception</span> <span class="n">Group</span> <span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
  <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span><span class="p">,</span> <span class="ow">in</span> <span class="n">f</span>
  <span class="o">|</span> <span class="n">ExceptionGroup</span><span class="p">:</span> <span class="n">there</span> <span class="n">were</span> <span class="n">problems</span>
  <span class="o">+-+----------------</span> <span class="mi">1</span> <span class="o">----------------</span>
    <span class="o">|</span> <span class="nb">OSError</span><span class="p">:</span> <span class="n">error</span> <span class="mi">1</span>
    <span class="o">+----------------</span> <span class="mi">2</span> <span class="o">----------------</span>
    <span class="o">|</span> <span class="nb">SystemError</span><span class="p">:</span> <span class="n">error</span> <span class="mi">2</span>
    <span class="o">+------------------------------------</span>
<span class="k">try</span><span class="p">:</span>
    <span class="nf">f</span><span class="p">()</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">caught </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="s">: e</span><span class="sh">'</span><span class="p">)</span>

<span class="n">caught</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">ExceptionGroup</span><span class="sh">'</span><span class="s">&gt;: e
</span></code></pre></div></div> <p>By using <code class="language-plaintext highlighter-rouge">except*</code> instead of <code class="language-plaintext highlighter-rouge">except</code>, we can selectively handle only the exceptions in the group that match a certain type. In the following example, which shows a nested exception group, each except* clause extracts from the group exceptions of a certain type while letting all other exceptions propagate to other clauses and eventually to be reraised.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
    <span class="k">raise</span> <span class="nc">ExceptionGroup</span><span class="p">(</span><span class="sh">"</span><span class="s">group1</span><span class="sh">"</span><span class="p">,</span>
                         <span class="p">[</span><span class="nc">OSError</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
                          <span class="nc">SystemError</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>
                          <span class="nc">ExceptionGroup</span><span class="p">(</span><span class="sh">"</span><span class="s">group2</span><span class="sh">"</span><span class="p">,</span>
                                         <span class="p">[</span><span class="nc">OSError</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="nc">RecursionError</span><span class="p">(</span><span class="mi">4</span><span class="p">)])])</span>

<span class="k">try</span><span class="p">:</span>
    <span class="nf">f</span><span class="p">()</span>
<span class="k">except</span><span class="o">*</span> <span class="nb">OSError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">There were OSErrors</span><span class="sh">"</span><span class="p">)</span>
<span class="k">except</span><span class="o">*</span> <span class="nb">SystemError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">There were SystemErrors</span><span class="sh">"</span><span class="p">)</span>

<span class="n">There</span> <span class="n">were</span> <span class="n">OSErrors</span>
<span class="n">There</span> <span class="n">were</span> <span class="n">SystemErrors</span>
  <span class="o">+</span> <span class="nb">Exception</span> <span class="n">Group</span> <span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
  <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="n">f</span>
  <span class="o">|</span> <span class="n">ExceptionGroup</span><span class="p">:</span> <span class="n">group1</span>
  <span class="o">+-+----------------</span> <span class="mi">1</span> <span class="o">----------------</span>
    <span class="o">|</span> <span class="n">ExceptionGroup</span><span class="p">:</span> <span class="n">group2</span>
    <span class="o">+-+----------------</span> <span class="mi">1</span> <span class="o">----------------</span>
      <span class="o">|</span> <span class="nb">RecursionError</span><span class="p">:</span> <span class="mi">4</span>
      <span class="o">+-------------</span>
</code></pre></div></div> <p>Note that the exceptions nested in an exception group must be instances, not types. This is because in practice the exceptions would typically be ones that have already been raised and caught by the program, along the following pattern:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">excs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">test</span> <span class="ow">in</span> <span class="n">tests</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">test</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">excs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>

<span class="k">if</span> <span class="n">excs</span><span class="p">:</span>
   <span class="k">raise</span> <span class="nc">ExceptionGroup</span><span class="p">(</span><span class="sh">"</span><span class="s">Test Failures</span><span class="sh">"</span><span class="p">,</span> <span class="n">excs</span><span class="p">)</span>
</code></pre></div></div> <h2 id="10-enriching-exceptions-with-notes">10. Enriching Exceptions with Notes</h2> <p>When an exception is created in order to be raised, it is usually initialized with information that describes the error that has occurred. There are cases where it is useful to add information after the exception was caught. For this purpose, exceptions have a method add_note(note) that accepts a string and adds it to the exception’s notes list. The standard traceback rendering includes all notes, in the order they were added, after the exception.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">'</span><span class="s">bad type</span><span class="sh">'</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="n">e</span><span class="p">.</span><span class="nf">add_note</span><span class="p">(</span><span class="sh">'</span><span class="s">Add some information</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">e</span><span class="p">.</span><span class="nf">add_note</span><span class="p">(</span><span class="sh">'</span><span class="s">Add some more information</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">raise</span>

<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">bad</span> <span class="nb">type</span>
<span class="n">Add</span> <span class="n">some</span> <span class="n">information</span>
<span class="n">Add</span> <span class="n">some</span> <span class="n">more</span> <span class="n">information</span>
</code></pre></div></div> <p>For example, when collecting exceptions into an exception group, we may want to add context information for the individual errors. In the following each exception in the group has a note indicating when this error has occurred.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
    <span class="k">raise</span> <span class="nc">OSError</span><span class="p">(</span><span class="sh">'</span><span class="s">operation failed</span><span class="sh">'</span><span class="p">)</span>

<span class="n">excs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">f</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">e</span><span class="p">.</span><span class="nf">add_note</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Happened in Iteration </span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">excs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>

<span class="k">raise</span> <span class="nc">ExceptionGroup</span><span class="p">(</span><span class="sh">'</span><span class="s">We have some problems</span><span class="sh">'</span><span class="p">,</span> <span class="n">excs</span><span class="p">)</span>
  <span class="o">+</span> <span class="nb">Exception</span> <span class="n">Group</span> <span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
  <span class="o">|</span> <span class="n">ExceptionGroup</span><span class="p">:</span> <span class="n">We</span> <span class="n">have</span> <span class="n">some</span> <span class="nf">problems </span><span class="p">(</span><span class="mi">3</span> <span class="n">sub</span><span class="o">-</span><span class="n">exceptions</span><span class="p">)</span>
  <span class="o">+-+----------------</span> <span class="mi">1</span> <span class="o">----------------</span>
    <span class="o">|</span> <span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
    <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="n">f</span>
    <span class="o">|</span> <span class="nb">OSError</span><span class="p">:</span> <span class="n">operation</span> <span class="n">failed</span>
    <span class="o">|</span> <span class="n">Happened</span> <span class="ow">in</span> <span class="n">Iteration</span> <span class="mi">1</span>
    <span class="o">+----------------</span> <span class="mi">2</span> <span class="o">----------------</span>
    <span class="o">|</span> <span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
    <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="n">f</span>
    <span class="o">|</span> <span class="nb">OSError</span><span class="p">:</span> <span class="n">operation</span> <span class="n">failed</span>
    <span class="o">|</span> <span class="n">Happened</span> <span class="ow">in</span> <span class="n">Iteration</span> <span class="mi">2</span>
    <span class="o">+----------------</span> <span class="mi">3</span> <span class="o">----------------</span>
    <span class="o">|</span> <span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
    <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">3</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="o">|</span>   <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="n">f</span>
    <span class="o">|</span> <span class="nb">OSError</span><span class="p">:</span> <span class="n">operation</span> <span class="n">failed</span>
    <span class="o">|</span> <span class="n">Happened</span> <span class="ow">in</span> <span class="n">Iteration</span> <span class="mi">3</span>
    <span class="o">+------------------------------------</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="machinelearning"/><summary type="html"><![CDATA[As one of the dullest fools among software developers club, I was aware of Exceptions recently though I have writen many Exception codelines in some languages. It sounds impossible, right?]]></summary></entry><entry><title type="html">Introduction to PyTorch</title><link href="https://nminhquang380.github.io/blog/2023/intro_pytorch/" rel="alternate" type="text/html" title="Introduction to PyTorch"/><published>2023-08-31T10:35:00+00:00</published><updated>2023-08-31T10:35:00+00:00</updated><id>https://nminhquang380.github.io/blog/2023/intro_pytorch</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/intro_pytorch/"><![CDATA[<h2 id="tensors">Tensors</h2> <p>Tensors are a specialized data structure that are very similar to arrays and matrices. In PyTorch, we use tensors to encode the inputs and outputs of a model, as well as the model’s parameters.</p> <p>Tensors are similar to NumPy’s ndarrays, except that tensors can run on GPUs or other specialized hardware to accelerate computing.</p> <h3 id="initialization">Initialization</h3> <ul> <li> <p>Directly from data</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">data</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>
  <span class="n">x_data</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div> </div> </li> <li> <p>From numpy array</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">np_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="n">x_np</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">np_array</span><span class="p">)</span> <span class="c1"># note
</span></code></pre></div> </div> </li> <li> <p>From another tensor</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">x_ones</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">ones_like</span><span class="p">(</span><span class="n">x_data</span><span class="p">)</span> <span class="c1"># retains the properties of x_data
</span>  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Ones Tensor: </span><span class="se">\n</span><span class="s"> </span><span class="si">{</span><span class="n">x_ones</span><span class="si">}</span><span class="s"> </span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    
  <span class="n">x_rand</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">rand_like</span><span class="p">(</span><span class="n">x_data</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="nb">float</span><span class="p">)</span> <span class="c1"># overrides the datatype of x_data
</span>  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Random Tensor: </span><span class="se">\n</span><span class="s"> </span><span class="si">{</span><span class="n">x_rand</span><span class="si">}</span><span class="s"> </span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div> </div> </li> <li> <p>With random or constant values</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,)</span>
  <span class="n">rand_tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="n">shape</span><span class="p">)</span>
  <span class="n">ones_tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">ones</span><span class="p">(</span><span class="n">shape</span><span class="p">)</span>
  <span class="n">zeros_tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">shape</span><span class="p">)</span>
    
  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Random Tensor: </span><span class="se">\n</span><span class="s"> </span><span class="si">{</span><span class="n">rand_tensor</span><span class="si">}</span><span class="s"> </span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Ones Tensor: </span><span class="se">\n</span><span class="s"> </span><span class="si">{</span><span class="n">ones_tensor</span><span class="si">}</span><span class="s"> </span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Zeros Tensor: </span><span class="se">\n</span><span class="s"> </span><span class="si">{</span><span class="n">zeros_tensor</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div> </div> </li> </ul> <h3 id="tensor-attributes">Tensor Attributes</h3> <p>Tensor attributes describe their shape, datatype, and the device on which they are stored.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Shape of tensor: </span><span class="si">{</span><span class="n">tensor</span><span class="p">.</span><span class="n">shape</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Datatype of tensor: </span><span class="si">{</span><span class="n">tensor</span><span class="p">.</span><span class="n">dtype</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Device tensor is stored on: </span><span class="si">{</span><span class="n">tensor</span><span class="p">.</span><span class="n">device</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h3 id="tensor-operations">Tensor Operations</h3> <p>Some tensor operations</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Returns the total number of elements in the input tensor.
</span><span class="n">tensor</span><span class="p">.</span><span class="nf">numel</span><span class="p">()</span>

<span class="c1"># Returns True if obj is a PyTorch tensor.
</span><span class="n">tensor</span><span class="p">.</span><span class="nf">is_tensor</span><span class="p">()</span>

<span class="c1"># CREATE TENSOR OPTIONS
# Constructs a tensor with no autograd history 
# (also known as a "leaf tensor", see Autograd mechanics) by copying data.
</span><span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]])</span>

<span class="c1"># Converts obj to a tensor.
</span><span class="n">arr</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">asarray</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>

<span class="c1"># Creates a tensor from np.ndarray
</span><span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>

<span class="c1"># Returns a tensor filled with the scalar value 0, 
# with the shape defined by the variable argument size.
</span><span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>

<span class="c1"># Returns a tensor filled with the scalar value 0, with the same size as input.
</span><span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">tensor</span><span class="p">)</span>

<span class="sh">"""</span><span class="s">
The same applies to ones, ones_like
</span><span class="sh">"""</span>

<span class="c1"># Returns a 1-D tensor of size [(end-start)/step] 
# with values from the interval [start, end) 
# taken with common difference step beginning from start.
</span><span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># Creates a one-dimensional tensor of size steps whose values are evenly spaced from
# base^start to base^end , inclusive, on a logarithmic scale with base base.
</span><span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">logspace</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">steps</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="mf">10.0</span><span class="p">)</span>

<span class="c1"># Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.
</span><span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">eye</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="c1"># Creates a tensor of size size filled with fill_value. 
# The tensor’s dtype is inferred from fill_value.
</span><span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">full</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div></div> <ul> <li> <p><strong>Standard numpy-like indexing and slicing:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">ones</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
  <span class="n">tensor</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div> </div> </li> <li> <p><strong>Joining Tensor</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">t1</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">cat</span><span class="p">([</span><span class="n">tensor</span><span class="p">,</span> <span class="n">tensor</span><span class="p">],</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div> </div> </li> <li> <p><strong>Multiplying Tensors</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># This computes the element-wise product
</span>  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">tensor.mul(tensor) </span><span class="se">\n</span><span class="s"> </span><span class="si">{</span><span class="n">tensor</span><span class="p">.</span><span class="nf">mul</span><span class="p">(</span><span class="n">tensor</span><span class="p">)</span><span class="si">}</span><span class="s"> </span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
  <span class="c1"># Alternative syntax:
</span>  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">tensor * tensor </span><span class="se">\n</span><span class="s"> </span><span class="si">{</span><span class="n">tensor</span> <span class="o">*</span> <span class="n">tensor</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div> </div> </li> <li> <p>Matrix Multiply between 2 tensors</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">tensor.matmul(tensor.T) </span><span class="se">\n</span><span class="s"> </span><span class="si">{</span><span class="n">tensor</span><span class="p">.</span><span class="nf">matmul</span><span class="p">(</span><span class="n">tensor</span><span class="p">.</span><span class="n">T</span><span class="p">)</span><span class="si">}</span><span class="s"> </span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
  <span class="c1"># Alternative syntax:
</span>  <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">tensor @ tensor.T </span><span class="se">\n</span><span class="s"> </span><span class="si">{</span><span class="n">tensor</span> <span class="o">@</span> <span class="n">tensor</span><span class="p">.</span><span class="n">T</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div> </div> </li> <li> <p><strong>In-place operations Operations that have a <code class="language-plaintext highlighter-rouge">_</code> suffix are in-place. For example: <code class="language-plaintext highlighter-rouge">x.copy_(y)</code>, <code class="language-plaintext highlighter-rouge">x.t_()</code>, will change <code class="language-plaintext highlighter-rouge">x</code>.</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">print</span><span class="p">(</span><span class="n">tensor</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
  <span class="n">tensor</span><span class="p">.</span><span class="nf">add_</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">tensor</span><span class="p">)</span>
</code></pre></div> </div> </li> </ul> <h2 id="introduction-to-torchautograd">Introduction to <code class="language-plaintext highlighter-rouge">torch.autograd</code></h2> <p><code class="language-plaintext highlighter-rouge">torch.autograd</code> is PyTorch’s automatic differentiation engine that powers neural network training. In this section, you will get a conceptual understanding of how autograd helps a neural network train.</p> <h3 id="background">Background</h3> <p><strong>Neural networks</strong> (NNs) are a collection of nested functions that are executed on some input data. These functions are defined by <em>parameters</em> (consisting of weights and biases), which in PyTorch are stored in tensors.</p> <p>Training a NN happens in two steps:</p> <p><strong>Forward Propagation:</strong> In forward prop, the NN makes its best guess about the correct output. It runs the input data through each of its functions to make this guess.</p> <p><strong>Backward Propagation</strong>: In backprop, the NN adjusts its parameters proportionate to the error in its guess. It does this by traversing backwards from the output, collecting the derivatives of the error with respect to the parameters of the functions (<em>gradients</em>), and optimizing the parameters using gradient descent.</p> <h3 id="usage-in-pytorch">Usage in PyTorch</h3> <p><strong>Let’s take a look at a single training step. For this example, we load a pretrained resnet18 model from <code class="language-plaintext highlighter-rouge">torchvision</code>. We create a random data tensor to represent a single image with 3 channels, and height &amp; width of 64, and its corresponding <code class="language-plaintext highlighter-rouge">label</code> initialized to some random values. Label in pretrained models has shape (1,1000).</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">torchvision.models</span> <span class="kn">import</span> <span class="n">resnet18</span><span class="p">,</span> <span class="n">ResNet18_Weights</span>
<span class="n">model</span> <span class="o">=</span> <span class="nf">resnet18</span><span class="p">(</span><span class="n">weights</span><span class="o">=</span><span class="n">ResNet18_Weights</span><span class="p">.</span><span class="n">DEFAULT</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
<span class="n">labels</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</code></pre></div></div> <p><strong>Next, we run the input data through the model through each of its layers to make a prediction. This is the forward pass.</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prediction</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="c1"># forward pass
</span></code></pre></div></div> <p><strong>We use the model’s prediction and the corresponding label to calculate the error (<code class="language-plaintext highlighter-rouge">loss</code>). The next step is to backpropagate this error through the network. Backward propagation is kicked off when we call <code class="language-plaintext highlighter-rouge">.backward()</code> on the error tensor. Autograd then calculates and stores the gradients for each model parameter in the parameter’s <code class="language-plaintext highlighter-rouge">.grad</code> attribute.</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">loss</span> <span class="o">=</span> <span class="p">(</span><span class="n">prediction</span> <span class="o">-</span> <span class="n">labels</span><span class="p">).</span><span class="nf">sum</span><span class="p">()</span>
<span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span> <span class="c1"># backward pass
</span></code></pre></div></div> <p><strong>Next, we load an optimizer, in this case SGD with a learning rate of 0.01 and <a href="https://towardsdatascience.com/stochastic-gradient-descent-with-momentum-a84097641a5d">momentum</a> of 0.9. We register all the parameters of the model in the optimizer.</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">optim</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="nc">SGD</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-2</span><span class="p">,</span> <span class="n">momentum</span><span class="o">=</span><span class="mf">0.9</span><span class="p">)</span>
</code></pre></div></div> <p><strong>Finally, we call <code class="language-plaintext highlighter-rouge">.step()</code> to initiate gradient descent. The optimizer adjusts each parameter by its gradient stored in <code class="language-plaintext highlighter-rouge">.grad</code>.</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">optim</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>
</code></pre></div></div> <h2 id="neural-networks">Neural Networks</h2> <p><strong>Neural networks can be constructed using the <code class="language-plaintext highlighter-rouge">torch.nn</code> package.</strong></p> <p><strong>Now that you had a glimpse of <code class="language-plaintext highlighter-rouge">autograd</code>, <code class="language-plaintext highlighter-rouge">nn</code> depends on <code class="language-plaintext highlighter-rouge">autograd</code> to define models and differentiate them. An <code class="language-plaintext highlighter-rouge">nn.Module</code> contains layers, and a method <code class="language-plaintext highlighter-rouge">forward(input)</code> that returns the <code class="language-plaintext highlighter-rouge">output</code>.</strong></p> <p><strong>For example, look at this network that classifies digit images:</strong></p> <p><img src="Deep%20Learning%20with%20PyTorch%202e8f246cbce841a89a9ac2863858394c/Untitled.png" alt="Untitled"/></p> <p><code class="language-plaintext highlighter-rouge">convnet</code></p> <p>It is a simple feed-forward network. It takes the input, feeds it through several layers one after the other, and then finally gives the output.</p> <p>A typical training procedure for a neural network is as follows:</p> <ul> <li>Define the neural network that has some learnable parameters (or weights)</li> <li>Iterate over a dataset of inputs</li> <li>Process input through the network</li> <li>Compute the loss (how far is the output from being correct)</li> <li>Propagate gradients back into the network’s parameters</li> <li>Update the weights of the network, typically using a simple update rule: <code class="language-plaintext highlighter-rouge">weight = weight - learning_rate * gradient</code></li> </ul> <h3 id="define-the-network">Define the network</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="n">torch.nn.functional</span> <span class="k">as</span> <span class="n">F</span>

<span class="k">class</span> <span class="nc">Net</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">Net</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="c1"># 1 input image channel, 6 output channels, 5x5 square convolution
</span>        <span class="c1"># kernel
</span>        <span class="n">self</span><span class="p">.</span><span class="n">conv1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">conv2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Conv2d</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
        <span class="c1"># an affine operation: y = Wx + b
</span>        <span class="n">self</span><span class="p">.</span><span class="n">fc1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">16</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">120</span><span class="p">)</span>  <span class="c1"># 5*5 from image dimension
</span>        <span class="n">self</span><span class="p">.</span><span class="n">fc2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">84</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fc3</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">84</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># Max pooling over a (2, 2) window
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="nf">max_pool2d</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">conv1</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
        <span class="c1"># If the size is a square, you can specify with a single number
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="nf">max_pool2d</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">conv2</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># flatten all dimensions except the batch dimension
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">fc1</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">fc2</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">fc3</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">x</span>

<span class="n">net</span> <span class="o">=</span> <span class="nc">Net</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">net</span><span class="p">)</span>
</code></pre></div></div> <p>You just have to define the <code class="language-plaintext highlighter-rouge">forward</code> function, and the <code class="language-plaintext highlighter-rouge">backward</code> function (where gradients are computed) is automatically defined for you using <code class="language-plaintext highlighter-rouge">autograd</code>. You can use any of the Tensor operations in the <code class="language-plaintext highlighter-rouge">forward</code> function.</p> <p>The learnable parameters of a model are returned by <code class="language-plaintext highlighter-rouge">net.parameters()</code></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">params</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">net</span><span class="p">.</span><span class="nf">parameters</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">size</span><span class="p">())</span>  <span class="c1"># conv1's .weight
</span></code></pre></div></div> <ul> <li> <p><strong>NOTE</strong></p> <blockquote> <p><code class="language-plaintext highlighter-rouge">torch.nn</code> only supports mini-batches. The entire <code class="language-plaintext highlighter-rouge">torch.nn</code> package only supports inputs that are a mini-batch of samples, and not a single sample.</p> <p>For example, <code class="language-plaintext highlighter-rouge">nn.Conv2d</code> will take in a 4D Tensor of <code class="language-plaintext highlighter-rouge">nSamples x nChannels x Height x Width</code>.</p> <p>If you have a single sample, just use <code class="language-plaintext highlighter-rouge">input.unsqueeze(0)</code> to add a fake batch dimension.</p> </blockquote> </li> <li> <p><strong>RECAP</strong></p> <blockquote> <p><strong><code class="language-plaintext highlighter-rouge">torch.Tensor</code> - A <em>multi-dimensional array</em> with support for autograd operations like <code class="language-plaintext highlighter-rouge">backward()</code>. Also <em>holds the gradient</em> w.r.t. the tensor.</strong></p> <p><strong><code class="language-plaintext highlighter-rouge">nn.Module</code> - Neural network module. <em>Convenient way of encapsulating parameters</em>, with helpers for moving them to GPU, exporting, loading, etc.</strong></p> <p><strong><code class="language-plaintext highlighter-rouge">nn.Parameter</code> - A kind of Tensor, that is <em>automatically registered as a parameter when assigned as an attribute to a</em> <code class="language-plaintext highlighter-rouge">Module</code>.</strong></p> <p><strong><code class="language-plaintext highlighter-rouge">autograd.Function</code> - Implements <em>forward and backward definitions of an autograd operation</em>. Every <code class="language-plaintext highlighter-rouge">Tensor</code> operation creates at least a single <code class="language-plaintext highlighter-rouge">Function</code> node that connects to functions that created a <code class="language-plaintext highlighter-rouge">Tensor</code> and <em>encodes its history</em>.</strong></p> </blockquote> </li> </ul> <h3 id="loss-function">Loss Function</h3> <p>A loss function takes the (output, target) pair of inputs, and computes a value that estimates how far away the output is from the target.</p> <p>There are several different <a href="https://pytorch.org/docs/nn.html#loss-functions">loss functions</a> under the nn package . A simple loss is: <code class="language-plaintext highlighter-rouge">nn.MSELoss</code> which computes the mean-squared error between the output and the target.</p> <p>For example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">output</span> <span class="o">=</span> <span class="nf">net</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="n">target</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>  <span class="c1"># a dummy target, for example
</span><span class="n">target</span> <span class="o">=</span> <span class="n">target</span><span class="p">.</span><span class="nf">view</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># make it the same shape as output
</span><span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">MSELoss</span><span class="p">()</span>

<span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">loss</span><span class="p">)</span>
</code></pre></div></div> <p>Now, if you follow <code class="language-plaintext highlighter-rouge">loss</code> in the backward direction, using its <code class="language-plaintext highlighter-rouge">.grad_fn</code> attribute, you will see a graph of computations that looks like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">input</span> <span class="o">-&gt;</span> <span class="n">conv2d</span> <span class="o">-&gt;</span> <span class="n">relu</span> <span class="o">-&gt;</span> <span class="n">maxpool2d</span> <span class="o">-&gt;</span> <span class="n">conv2d</span> <span class="o">-&gt;</span> <span class="n">relu</span> <span class="o">-&gt;</span> <span class="n">maxpool2d</span>
      <span class="o">-&gt;</span> <span class="n">flatten</span> <span class="o">-&gt;</span> <span class="n">linear</span> <span class="o">-&gt;</span> <span class="n">relu</span> <span class="o">-&gt;</span> <span class="n">linear</span> <span class="o">-&gt;</span> <span class="n">relu</span> <span class="o">-&gt;</span> <span class="n">linear</span>
      <span class="o">-&gt;</span> <span class="n">MSELoss</span>
      <span class="o">-&gt;</span> <span class="n">loss</span>
</code></pre></div></div> <p>So, when we call <code class="language-plaintext highlighter-rouge">loss.backward()</code>, the whole graph is differentiated w.r.t. the neural net parameters, and all Tensors in the graph that have <code class="language-plaintext highlighter-rouge">requires_grad=True</code> will have their <code class="language-plaintext highlighter-rouge">.grad</code> Tensor accumulated with the gradient.</p> <h3 id="backprop">Backprop</h3> <p>To backpropagate the error all we have to do is to <code class="language-plaintext highlighter-rouge">loss.backward()</code>. You need to clear the existing gradients though, else gradients will be accumulated to existing gradients.</p> <p>Now we shall call <code class="language-plaintext highlighter-rouge">loss.backward()</code>, and have a look at conv1’s bias gradients before and after the backward.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">net</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>     <span class="c1"># zeroes the gradient buffers of all parameters
</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">conv1.bias.grad before backward</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">net</span><span class="p">.</span><span class="n">conv1</span><span class="p">.</span><span class="n">bias</span><span class="p">.</span><span class="n">grad</span><span class="p">)</span>

<span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">conv1.bias.grad after backward</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">net</span><span class="p">.</span><span class="n">conv1</span><span class="p">.</span><span class="n">bias</span><span class="p">.</span><span class="n">grad</span><span class="p">)</span>
</code></pre></div></div> <h3 id="update-the-weights">Update the weights</h3> <p>The simplest update rule used in practice is the Stochastic Gradient Descent (SGD):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span> <span class="o">-</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">gradient</span>
</code></pre></div></div> <p>We can implement this using simple Python code:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.01</span>
<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">net</span><span class="p">.</span><span class="nf">parameters</span><span class="p">():</span>
    <span class="n">f</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">sub_</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">grad</span><span class="p">.</span><span class="n">data</span> <span class="o">*</span> <span class="n">learning_rate</span><span class="p">)</span>
</code></pre></div></div> <p>However, as you use neural networks, you want to use various different update rules such as SGD, Nesterov-SGD, Adam, RMSProp, etc. To enable this, we built a small package: <code class="language-plaintext highlighter-rouge">torch.optim</code> that implements all these methods. Using it is very simple:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch.optim</span> <span class="k">as</span> <span class="n">optim</span>

<span class="c1"># create your optimizer
</span><span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="p">.</span><span class="nc">SGD</span><span class="p">(</span><span class="n">net</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span>

<span class="c1"># in your training loop:
</span><span class="n">optimizer</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>   <span class="c1"># zero the gradient buffers
</span><span class="n">output</span> <span class="o">=</span> <span class="nf">net</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
<span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
<span class="n">optimizer</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>    <span class="c1"># Does the update
</span></code></pre></div></div> <h2 id="training-a-classifier">Training a Classifier</h2> <p>This is it. You have seen how to define neural networks, compute loss and make updates to the weights of the network.</p> <p>Now you might be thinking,</p> <h3 id="what-about-data">What about Data?</h3> <p>Generally, when you have to deal with image, text, audio or video data, you can use standard python packages that load data into a numpy array. Then you can convert this array into a <code class="language-plaintext highlighter-rouge">torch.*Tensor</code>.</p> <ul> <li>For images, packages such as <strong>Pillow, OpenCV are useful</strong></li> <li>For audio, packages such as <strong>scipy and librosa</strong></li> <li>For text, either raw Python or Cython based loading, or <strong>NLTK and SpaCy</strong> are useful</li> </ul> <p>Specifically for vision, we have created a package called <code class="language-plaintext highlighter-rouge">torchvision</code>, that has data loaders for common datasets such as ImageNet, CIFAR10, MNIST, etc. and data transformers for images, viz., <code class="language-plaintext highlighter-rouge">torchvision.datasets</code> and <code class="language-plaintext highlighter-rouge">torch.utils.data.DataLoader</code>.</p> <p>This provides a huge convenience and avoids writing boilerplate code.</p> <p>For this tutorial, we will use the CIFAR10 dataset. It has the classes: ‘airplane’, ‘automobile’, ‘bird’, ‘cat’, ‘deer’, ‘dog’, ‘frog’, ‘horse’, ‘ship’, ‘truck’. The images in CIFAR-10 are of size 3x32x32, i.e. 3-channel color images of 32x32 pixels in size.</p> <h3 id="training-an-image-classifier">Training an image classifier</h3> <p>We will do the following steps in order:</p> <ol> <li>Load and normalize the CIFAR10 training and test datasets using <code class="language-plaintext highlighter-rouge">torchvision</code></li> <li>Define a Convolutional Neural Network</li> <li>Define a loss function</li> <li>Train the network on the training data</li> <li>Test the network on the test data</li> </ol> <p><strong>Load and Normalize CIFAR10</strong></p> <p>Using <code class="language-plaintext highlighter-rouge">torchvision</code>, it’s extremely easy to load CIFAR10.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torchvision</span>
<span class="kn">import</span> <span class="n">torchvision.transforms</span> <span class="k">as</span> <span class="n">transforms</span>
</code></pre></div></div> <p>The output of torchvision datasets are PILImage images of range [0, 1]. We transform them to Tensors of normalized range [-1, 1].</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">transform</span> <span class="o">=</span> <span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span>
    <span class="p">[</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
     <span class="n">transforms</span><span class="p">.</span><span class="nc">Normalize</span><span class="p">((</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">))])</span>

<span class="n">batch_size</span> <span class="o">=</span> <span class="mi">4</span>

<span class="n">trainset</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">datasets</span><span class="p">.</span><span class="nc">CIFAR10</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="sh">'</span><span class="s">./data</span><span class="sh">'</span><span class="p">,</span> <span class="n">train</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                                        <span class="n">download</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="n">transform</span><span class="p">)</span>
<span class="n">trainloader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span><span class="n">trainset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span>
                                          <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="n">testset</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">datasets</span><span class="p">.</span><span class="nc">CIFAR10</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="sh">'</span><span class="s">./data</span><span class="sh">'</span><span class="p">,</span> <span class="n">train</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                                       <span class="n">download</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="n">transform</span><span class="p">)</span>
<span class="n">testloader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span><span class="n">testset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span>
                                         <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="n">classes</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">plane</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">car</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">bird</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">cat</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">deer</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">dog</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">frog</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">horse</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ship</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">truck</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>Let us show some of the training images, for fun.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># functions to show an image
</span>
<span class="k">def</span> <span class="nf">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">):</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">img</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mf">0.5</span>     <span class="c1"># unnormalize
</span>    <span class="n">npimg</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="nf">numpy</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="n">npimg</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="c1"># get some random training images
</span><span class="n">dataiter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">trainloader</span><span class="p">)</span>
<span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">dataiter</span><span class="p">)</span>

<span class="c1"># show images
</span><span class="nf">imshow</span><span class="p">(</span><span class="n">torchvision</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="nf">make_grid</span><span class="p">(</span><span class="n">images</span><span class="p">))</span>
<span class="c1"># print labels
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">classes</span><span class="p">[</span><span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span><span class="si">:</span><span class="mi">5</span><span class="n">s</span><span class="si">}</span><span class="sh">'</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)))</span>
</code></pre></div></div> <p><strong>Define a Convolutional Neural Network</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="n">torch.nn.functional</span> <span class="k">as</span> <span class="n">F</span>

<span class="k">class</span> <span class="nc">Net</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">conv1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Conv2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">pool</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">conv2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Conv2d</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fc1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">16</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">120</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fc2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">84</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fc3</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">84</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">pool</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">conv1</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">pool</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">conv2</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># flatten all dimensions except batch
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">fc1</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">fc2</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">fc3</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">x</span>

<span class="n">net</span> <span class="o">=</span> <span class="nc">Net</span><span class="p">()</span>
</code></pre></div></div> <p><strong>Define a Loss function and optimizer</strong></p> <p>Let’s use a Classification Cross-Entropy loss and SGD with momentum.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch.optim</span> <span class="k">as</span> <span class="n">optim</span>

<span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">CrossEntropyLoss</span><span class="p">()</span>
<span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="p">.</span><span class="nc">SGD</span><span class="p">(</span><span class="n">net</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span> <span class="n">momentum</span><span class="o">=</span><span class="mf">0.9</span><span class="p">)</span>
</code></pre></div></div> <p><strong>Train the network</strong></p> <p>This is when things start to get interesting. We simply have to loop over our data iterator, and feed the inputs to the network and optimize.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>  <span class="c1"># loop over the dataset multiple times
</span>
    <span class="n">running_loss</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">trainloader</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
        <span class="c1"># get the inputs; data is a list of [inputs, labels]
</span>        <span class="n">inputs</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">data</span>

        <span class="c1"># zero the parameter gradients
</span>        <span class="n">optimizer</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>

        <span class="c1"># forward + backward + optimize
</span>        <span class="n">outputs</span> <span class="o">=</span> <span class="nf">net</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
        <span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>

        <span class="c1"># print statistics
</span>        <span class="n">running_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2000</span> <span class="o">==</span> <span class="mi">1999</span><span class="p">:</span>    <span class="c1"># print every 2000 mini-batches
</span>            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">[</span><span class="si">{</span><span class="n">epoch</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="si">:</span><span class="mi">5</span><span class="n">d</span><span class="si">}</span><span class="s">] loss: </span><span class="si">{</span><span class="n">running_loss</span> <span class="o">/</span> <span class="mi">2000</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
            <span class="n">running_loss</span> <span class="o">=</span> <span class="mf">0.0</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Finished Training</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>Save our trained model:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PATH</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./cifar_net.pth</span><span class="sh">'</span>
<span class="n">torch</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">net</span><span class="p">.</span><span class="nf">state_dict</span><span class="p">(),</span> <span class="n">PATH</span><span class="p">)</span>
</code></pre></div></div> <p><strong>Test the network on the test data</strong></p> <p>We have trained the network for 2 passes over the training dataset. But we need to check if the network has learnt anything at all.</p> <p>We will check this by predicting the class label that the neural network outputs, and checking it against the ground-truth. If the prediction is correct, we add the sample to the list of correct predictions.</p> <p>Okay, first step. Let us display an image from the test set to get familiar.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dataiter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">testloader</span><span class="p">)</span>
<span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">dataiter</span><span class="p">)</span>

<span class="c1"># print images
</span><span class="nf">imshow</span><span class="p">(</span><span class="n">torchvision</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="nf">make_grid</span><span class="p">(</span><span class="n">images</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">GroundTruth: </span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">classes</span><span class="p">[</span><span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span><span class="si">:</span><span class="mi">5</span><span class="n">s</span><span class="si">}</span><span class="sh">'</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)))</span>
</code></pre></div></div> <p>Next, let’s load back in our saved model (note: saving and re-loading the model wasn’t necessary here, we only did it to illustrate how to do so):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load trained model
</span><span class="n">net</span> <span class="o">=</span> <span class="nc">Net</span><span class="p">()</span>
<span class="n">net</span><span class="p">.</span><span class="nf">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">PATH</span><span class="p">))</span>

<span class="c1"># Generate outputs
</span><span class="n">outputs</span> <span class="o">=</span> <span class="nf">net</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>

<span class="c1"># Show predictions
</span><span class="n">_</span><span class="p">,</span> <span class="n">predicted</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Predicted: </span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">classes</span><span class="p">[</span><span class="n">predicted</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span><span class="si">:</span><span class="mi">5</span><span class="n">s</span><span class="si">}</span><span class="sh">'</span>
                              <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)))</span>
</code></pre></div></div> <p>Let us look at how the network performs on the whole dataset.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
<span class="c1"># since we're not training, we don't need to calculate the gradients for our outputs
</span><span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="nf">no_grad</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">testloader</span><span class="p">:</span>
        <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">data</span>
        <span class="c1"># calculate outputs by running images through the network
</span>        <span class="n">outputs</span> <span class="o">=</span> <span class="nf">net</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
        <span class="c1"># the class with the highest energy is what we choose as prediction
</span>        <span class="n">_</span><span class="p">,</span> <span class="n">predicted</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">outputs</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">total</span> <span class="o">+=</span> <span class="n">labels</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">correct</span> <span class="o">+=</span> <span class="p">(</span><span class="n">predicted</span> <span class="o">==</span> <span class="n">labels</span><span class="p">).</span><span class="nf">sum</span><span class="p">().</span><span class="nf">item</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Accuracy of the network on the 10000 test images: </span><span class="si">{</span><span class="mi">100</span> <span class="o">*</span> <span class="n">correct</span> <span class="o">//</span> <span class="n">total</span><span class="si">}</span><span class="s"> %</span><span class="sh">'</span><span class="p">)</span> <span class="c1"># Accuracy = 54%
</span></code></pre></div></div> <p>That looks way better than chance, which is 10% accuracy (randomly picking a class out of 10 classes). Seems like the network learnt something.</p> <p>Now, look out what are the classes that performed well, and the classes that did not perform well:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># prepare to count predictions for each class
</span><span class="n">correct_pred</span> <span class="o">=</span> <span class="p">{</span><span class="n">classname</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">classname</span> <span class="ow">in</span> <span class="n">classes</span><span class="p">}</span>
<span class="n">total_pred</span> <span class="o">=</span> <span class="p">{</span><span class="n">classname</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">classname</span> <span class="ow">in</span> <span class="n">classes</span><span class="p">}</span>

<span class="c1"># again no gradients needed
</span><span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="nf">no_grad</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">testloader</span><span class="p">:</span>
        <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">data</span>
        <span class="n">outputs</span> <span class="o">=</span> <span class="nf">net</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">predictions</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="c1"># collect the correct predictions for each class
</span>        <span class="k">for</span> <span class="n">label</span><span class="p">,</span> <span class="n">prediction</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span> <span class="n">predictions</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">label</span> <span class="o">==</span> <span class="n">prediction</span><span class="p">:</span>
                <span class="n">correct_pred</span><span class="p">[</span><span class="n">classes</span><span class="p">[</span><span class="n">label</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">total_pred</span><span class="p">[</span><span class="n">classes</span><span class="p">[</span><span class="n">label</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="c1"># print accuracy for each class
</span><span class="k">for</span> <span class="n">classname</span><span class="p">,</span> <span class="n">correct_count</span> <span class="ow">in</span> <span class="n">correct_pred</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="n">accuracy</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="nf">float</span><span class="p">(</span><span class="n">correct_count</span><span class="p">)</span> <span class="o">/</span> <span class="n">total_pred</span><span class="p">[</span><span class="n">classname</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Accuracy for class: </span><span class="si">{</span><span class="n">classname</span><span class="si">:</span><span class="mi">5</span><span class="n">s</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">accuracy</span><span class="si">:</span><span class="p">.</span><span class="mi">1</span><span class="n">f</span><span class="si">}</span><span class="s"> %</span><span class="sh">'</span><span class="p">)</span>

<span class="o">---------------</span>
<span class="sh">"""</span><span class="s">
Accuracy for class: plane is 51.9 %
Accuracy for class: car   is 68.3 %
Accuracy for class: bird  is 39.3 %
Accuracy for class: cat   is 25.1 %
Accuracy for class: deer  is 62.1 %
Accuracy for class: dog   is 39.1 %
Accuracy for class: frog  is 67.9 %
Accuracy for class: horse is 65.6 %
Accuracy for class: ship  is 72.3 %
Accuracy for class: truck is 56.8 %
</span><span class="sh">"""</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="machinelearning"/><summary type="html"><![CDATA[Tensors]]></summary></entry><entry><title type="html">Decorator in Python</title><link href="https://nminhquang380.github.io/blog/2023/python_decorator/" rel="alternate" type="text/html" title="Decorator in Python"/><published>2023-08-31T10:35:00+00:00</published><updated>2023-08-31T10:35:00+00:00</updated><id>https://nminhquang380.github.io/blog/2023/python_decorator</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/python_decorator/"><![CDATA[<p>Decorators are very powerful and useful tool in Python since it allows programmers to modify the behavior of a function or class. Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanently modifying it. But before diving deep into decorators let us understand some concepts that will come in handy in learning the decorators.</p> <h2 id="first-class-objects">First Class Objects</h2> <p>In Python functions are first class objects which means <strong>that functions</strong> in python <strong>can be used or passed as arguments</strong>. Properties of first class functions:</p> <ul> <li>A function is an instance of the object type.</li> <li>Can be stored in a variable.</li> <li>Can be passed the function as a parameter to another function.</li> <li>Can return the function from a function.</li> <li>Can store them in data structures such as hash tables, lists,…</li> </ul> <p><strong>Ex1:</strong> Treat function as objects.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">shout</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">shout</span><span class="p">(</span><span class="sh">'</span><span class="s">Hello</span><span class="sh">'</span><span class="p">))</span>

<span class="n">yell</span> <span class="o">=</span> <span class="n">shout</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">yell</span><span class="p">(</span><span class="sh">'</span><span class="s">Hello</span><span class="sh">'</span><span class="p">))</span>

<span class="c1"># OUTPUT
# HELLO
# HELLO
</span></code></pre></div></div> <p>In the above example, we have assigned the function shout to a variable. This will not call the fucntion, instead, it takes the function object referenced by a <code class="language-plaintext highlighter-rouge">shout</code> and creates a second name pointing to it, <code class="language-plaintext highlighter-rouge">yell</code>.</p> <p><strong>Ex2:</strong> Passing the function as an argument</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">shout</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">whisper</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="n">greeting</span> <span class="o">=</span> <span class="nf">func</span><span class="p">(</span><span class="sh">'</span><span class="s">Hello</span><span class="sh">'</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>

<span class="c1"># OUTPUT
# HELLO
# hello
</span></code></pre></div></div> <p><strong>Ex3:</strong> Returning functions from another function.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_adder</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">adder</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
    <span class="k">return</span> <span class="n">adder</span>

<span class="n">add_15</span> <span class="o">=</span> <span class="nf">create_adder</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">add_15</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>

<span class="c1"># OUTPUT
# 25
</span></code></pre></div></div> <h2 id="decorators">Decorators</h2> <p>As stated above the decorators are used to modify the behaviour of function or class. In Decorators, functions are taken as the argument into another function and then called inside the wrapper function.</p> <p><strong>Decorator can modify</strong> the behaviour:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># inner function can access the outer local
</span>    <span class="c1"># functions like in this case "func"
</span>    <span class="k">def</span> <span class="nf">inner1</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello, this is before function execution</span><span class="sh">"</span><span class="p">)</span>
 
        <span class="c1"># calling the actual function now
</span>        <span class="c1"># inside the wrapper function.
</span>        <span class="nf">func</span><span class="p">()</span>
 
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">This is after function execution</span><span class="sh">"</span><span class="p">)</span>
         
    <span class="k">return</span> <span class="n">inner1</span>
 
 
<span class="c1"># defining a function, to be called inside wrapper
</span><span class="k">def</span> <span class="nf">function_to_be_used</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">This is inside the function !!</span><span class="sh">"</span><span class="p">)</span>
 
 
<span class="c1"># passing 'function_to_be_used' inside the
# decorator to control its behaviour
</span><span class="n">function_to_be_used</span> <span class="o">=</span> <span class="nf">hello_decorator</span><span class="p">(</span><span class="n">function_to_be_used</span><span class="p">)</span>
 
 
<span class="c1"># calling the function
</span><span class="nf">function_to_be_used</span><span class="p">()</span>

<span class="c1"># OUTPUT
# Hello, this is before function execution
# This is inside the function !!
# This is after function execution
</span></code></pre></div></div> <p><strong>Ex:</strong> Find out the excution time of a function using a decorator.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># importing libraries
</span><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">math</span>
 
<span class="c1"># decorator to calculate duration
# taken by any function.
</span><span class="k">def</span> <span class="nf">calculate_time</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
     
    <span class="c1"># added arguments inside the inner1,
</span>    <span class="c1"># if function takes any arguments,
</span>    <span class="c1"># can be added like this.
</span>    <span class="k">def</span> <span class="nf">inner1</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
 
        <span class="c1"># storing time before function execution
</span>        <span class="n">begin</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
         
        <span class="nf">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
 
        <span class="c1"># storing time after function execution
</span>        <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total time taken in : </span><span class="sh">"</span><span class="p">,</span> <span class="n">func</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">begin</span><span class="p">)</span>
 
    <span class="k">return</span> <span class="n">inner1</span>
 
 
 
<span class="c1"># this can be added to any function present,
# in this case to calculate a factorial
</span><span class="nd">@calculate_time</span>
<span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
 
    <span class="c1"># sleep 2 seconds because it takes very less time
</span>    <span class="c1"># so that you can see the actual difference
</span>    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">factorial</span><span class="p">(</span><span class="n">num</span><span class="p">))</span>
 
<span class="c1"># calling the function.
</span><span class="nf">factorial</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="c1"># OUTPUT
# 3628800
# Total time taken in :  factorial 2.0061802864074707
</span></code></pre></div></div> <h3 id="chaining-decorators">Chaining Decorators</h3> <p>In simpler terms chaining decorators means decorating a function with multiple decorators.</p> <p>Example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># code for testing decorator chaining
</span><span class="k">def</span> <span class="nf">decor1</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nf">func</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
    <span class="k">return</span> <span class="n">inner</span>
 
<span class="k">def</span> <span class="nf">decor</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nf">func</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span>
    <span class="k">return</span> <span class="n">inner</span>
 
<span class="nd">@decor1</span>
<span class="nd">@decor</span>
<span class="k">def</span> <span class="nf">num</span><span class="p">():</span>
    <span class="k">return</span> <span class="mi">10</span>
 
<span class="nd">@decor</span>
<span class="nd">@decor1</span>
<span class="k">def</span> <span class="nf">num2</span><span class="p">():</span>
    <span class="k">return</span> <span class="mi">10</span>
   
<span class="nf">print</span><span class="p">(</span><span class="nf">num</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">num2</span><span class="p">())</span>

<span class="c1"># OUTPUT
# 400
# 200
</span></code></pre></div></div> <p>Reference: <a href="https://www.geeksforgeeks.org/decorators-in-python/">Decorators in Python</a></p>]]></content><author><name></name></author><category term="machinelearning"/><summary type="html"><![CDATA[Decorators are very powerful and useful tool in Python since it allows programmers to modify the behavior of a function or class. Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanently modifying it. But before diving deep into decorators let us understand some concepts that will come in handy in learning the decorators.]]></summary></entry><entry><title type="html">Handling File in Python</title><link href="https://nminhquang380.github.io/blog/2023/python_file_handling/" rel="alternate" type="text/html" title="Handling File in Python"/><published>2023-08-31T10:35:00+00:00</published><updated>2023-08-31T10:35:00+00:00</updated><id>https://nminhquang380.github.io/blog/2023/python_file_handling</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/python_file_handling/"><![CDATA[<p>Using Python as my primary language, but sometimes I really struggle with file handling. Usually, when I read articles, books or just some kind of documents, I try to copy their codes to handle files. One of the reasons is that in first, I didn’t think it was important, because it was merely used to download, and open file. But when I tried to make it by myself, it turned out something different and difficult as well. Their codes are really complex in someways. Thus, in this post, I will try to learn how to handle files.</p> <p>This post will cover:</p> <ul> <li>Open &amp; Close</li> <li>Read &amp; Write</li> <li>Copy, Move &amp; Delete</li> <li>Search</li> <li>Move file pointer</li> <li>File Status</li> <li>Play with file path (the most terrifying stuff for me)</li> </ul> <p>This post is inspired of a article in Toward Data Science, here is <a href="https://towardsdatascience.com/knowing-these-you-can-cover-99-of-file-operations-in-python-84725d82c2df">link</a>.</p> <h2 id="open--close">Open &amp; Close</h2> <p>Python has a built-in function open that opens the file and returns a file object. The type of the file object depends on the mode in which the file is opened. It can be a text file object, a raw binary file, and a buffered binary file. Every file object has methods such as read() and write().</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>file = open("test_file.txt","w+")
file.read()
file.write("a new line")
</code></pre></div></div> <p>The most common modes are listed in the table. An important rule is that any w related mode will first truncate the file if it exists and then create a new file. Be careful with this mode if you don’t want to overwrite the file and use a append mode if possible.</p> <table> <thead> <tr> <th>mode</th> <th>meaning</th> </tr> </thead> <tbody> <tr> <td>r</td> <td>open for reading (default)</td> </tr> <tr> <td>r+</td> <td>open for both reading and writing (file pointer is at the beginning of the file)</td> </tr> <tr> <td>w</td> <td>open for writing (truncate the file if it exists)</td> </tr> <tr> <td>w+</td> <td>open for both reading and writing (truncate the file if it exists)</td> </tr> <tr> <td>a</td> <td>open for writing (append to the end of the file if exists &amp; file pointer is at the end of the file)</td> </tr> </tbody> </table> <p>The problem in the previous code block is that we only opened the file, but didn’t close it. It’s important to always close the file when working with files. Having an open file object can cause unpredictable behaviors such as resource leak. There are two ways to make sure that a file is closed properly.</p> <ol> <li>Use close() A good practice is to put it in finally, so that we can make sure the file will be closed in any case.</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try:
    file = open('test_file.txt', 'w+')
    file.write('Hello')
exception Exception as e:
    logging.exception(e)
finally:
    file.close()
</code></pre></div></div> <ol> <li>Use context manager with open(…) as f With open() as f statement implements <strong>enter</strong> and <strong>exit</strong> methods to open and close the file. Besides, it encapsulates try/finally statement in the context manager, which means we will never forget to close the file.</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>with open('test_file', 'w+') as file:
    file.write('a new line')
</code></pre></div></div> <h2 id="read--write">Read &amp; Write</h2> <p>The file object provides 3 methods to read a file which are read(), readline() and readlines().</p> <ul> <li>read(size=-1) returns the entire contents of a file.</li> <li>readline(size=-1) returns an entire line including character \n at the end.</li> <li>readlines(hint=-1) returns all the lines of a file in a list. The optional parameter hint means if the number of characters returned exceeds hint, no more lines will be returned.</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>with open('test.txt', 'r') as reader:
    line = reader.readline()
    while line != "":
        line = reader.readline()
        print(line)
</code></pre></div></div> <p>In terms of writing, there are 2 methods write() and writelines(). <strong>It’s the responsibility of the developer to add \n at the end.</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>with open('test.txt', 'w+') as f:
    f.write('hi\n')
    f.writelines(['this is a line\n', 'this is another line\n'])

#&gt;&gt;&gt; cat test.txt
# hi
# this is a line
# this is another line
</code></pre></div></div> <p>If you write text to a special file type such as JSON or csv, then you should use Python built-in module json or csv on top of file object.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import csv
import json

with open('cities.csv', 'w+') as file:
    writer = csv.DicWriter(file, fieldnames=['city', 'country'])
    writer.writerheader()
    writer.writerow({'city': 'Amsterdam', 'country': 'Netherlands'})
    writer.writerows(
        [
            {'city': 'Hanoi', 'country': 'Vietnam'},
            {'city': 'Melbourne', 'country': 'Australia'}
        ]
    )

with open('cities.json', 'w+') as file:
json.dump({'city': 'Amsterdam', 'country': 'Netherlands'}, file)

</code></pre></div></div> <h2 id="move-pointer-within-the-file">Move pointer within the file</h2> <p>When we open a file, we get a file handler that points to a certain position. In r and w modes, the handler points to the beginning of the file. In a mode, the handler points to the end of the file.</p> <p>As we read from the file, the pointer moves to the place where the next read will start from, unless we tell the pointer to move around. You can do this using 2 methods: tell() and seek().</p> <p>tell() returns the current position of the pointer as number of bytes/characters from the beginning of the file. seek(offset,whence=0) moves the handler to a position offset characters away from whence. whence can be:</p> <p>0: from the beginning of the file 1: from the current position 2: from the end of the file</p> <h2 id="understand-the-file-status">Understand the file status</h2> <p>The file system on the operating system can tell you a number of practical information about a file. For example, what’s the size of the file, when it was created and modified. To get this information in Python, you can use os or pathlib module. Actually there are many common things between os and pathlib. pathlib is a more object-oriented module than os.</p> <p><strong><em>os</em></strong></p> <p>A way to get a complete status is to use os.stat(‘test.txt’).</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(os.stat("text.txt"))
&gt;&gt;&gt; os.stat_result(st_mode=33188, st_ino=8618932538, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=16, st_atime=1597527409, st_mtime=1597527409, st_ctime=1597527409)
</code></pre></div></div> <p>You can get styatistics individually using os.path</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>os.path.getatime()
os.path.getctime()
os.path.getmtime()
os.path.getsize()
</code></pre></div></div> <p><strong><em>Pathlib</em></strong></p> <p>Another way to get the complete status is to use pathlib.Path(“text.txt”).stat(). It returns the same object as os.stat().</p> <h2 id="copy-move-and-delete-a-file">Copy, Move and Delete a file</h2> <p>Python has many built-in modules to handle file movement. Before you trust the first answer returned by Google, you should be aware that different choices of modules can lead to different performances. Some modules will block the thread until the file movement is done, while others might do it asynchronously.</p> <p><strong><em>shutil</em></strong></p> <p>shutil is the most well-known module for moving, copying, and deleting both files and folders. It provides 4 methods to only copy a file. copy(), copy2() and copyfile().</p> <p>copy() v.s. copy2(): copy2() is very much similar to copy(). The difference is that copy2() also copies the metadata of the file such as the most recent access time, the most recent modification time. But according to Python doc, even copy2() cannot copy all the metadata due to the constrain on the operating system.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shutil.copy("1.csv", "copy.csv")
shutil.copy2("1.csv", "copy2.csv")

print(pathlib.Path("1.csv").stat())
print(pathlib.Path("copy.csv").stat())
print(pathlib.Path("copy2.csv").stat())
# 1.csv
# os.stat_result(st_mode=33152, st_ino=8618884732, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=11, st_atime=1597570395, st_mtime=1597259421, st_ctime=1597570360)

# copy.csv
# os.stat_result(st_mode=33152, st_ino=8618983930, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=11, st_atime=1597570387, st_mtime=1597570395, st_ctime=1597570395)

# copy2.csv
# os.stat_result(st_mode=33152, st_ino=8618983989, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=11, st_atime=1597570395, st_mtime=1597259421, st_ctime=1597570395)
</code></pre></div></div> <p>copy() v.s. copyfile(): copy() sets the permission of the new file the same as the original file, but copyfile() doesn’t copy its permission mode. Secondly, the destination of copy() can be a directory. If a file with the same name exists, it will be overwritten, otherwise, a new file will be created. But, the destination of copyfile() must be the target file name.</p> <p><strong><em>os</em></strong></p> <p>os module has a function system() that allows you to execute the command in a subshell. You need to pass the command as an argument to the system(). This has the same effect as the command executed on the operating system. For moving and deleting files, you can also use dedicated functions in os module.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># copy
os.system("cp 1.csv copy.csv")

# rename/move
os.system("mv 1.csv move.csv")
os.rename("1.csv", "move.csv")

# delete
os.system("rm move.csv")
</code></pre></div></div> <h2 id="search-a-file">Search a File</h2> <p>After copying and moving files, you will probably want to search for filenames that match a particular pattern. Python provides a number of built-in functions for you to choose from.</p> <p><strong><em>glob</em></strong></p> <blockquote> <blockquote> <p>The glob module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell. It supports wildcard characters such as * ? [].</p> </blockquote> </blockquote> <p>glob.glob(“*.csv”) searches for all the files that have csv extension in the current directory. glob module makes it possible to search for files in the subdirectories as well.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import glob
glob.glob('*.csv')
# ['1.csv', '2.csv']
glob.glob('**/*.csv', recursive=True)
# ['1.csv', '2.csv', 'source/3.csv']
</code></pre></div></div> <p><strong><em>os</em></strong></p> <p>We can simply list all the files in the directory using os.listdir() and use file.endswith() and file.startswith() to detect the pattern. If you want to traverse the directory, then use os.walk().</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os

for file in os.listdir('.'):
    if file.endswith('.csv'):
        print(file)

for root, dirs, files in os.walk('.'):
    for file in files:
        if file.endswith('.csv'):
            print(file)
</code></pre></div></div> <p><strong><em>pathlib</em></strong></p> <p>pathlib has a similar function to the glob module. It’s possible to search filenames recursively as well. Compared to the previous solution based on os, pathlib has less code and offers a more object-oriented solution.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from pathlib import Path
    
    p = Path('.')
    for name in p.glob('**/*.csv'):
        print(name)
</code></pre></div></div> <h2 id="play-with-file-path">Play with file path</h2> <p><strong><em>relative and absolute path</em></strong></p> <p>Both os and pathlib offer functions to get the relative path and absolute path of a file or a directory.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
import pathlib

print(os.path.abspath("1.txt"))
print(os.path.respath("1.txt"))

print(pathlib.Path('1.txt').absolute())
print(pathlib.Path('1.txt'))
</code></pre></div></div> <p><strong><em>Joining Paths</em></strong></p> <p>This is how we can join paths in os and pathlib independent of the environment. pathlib uses a slash to create child paths.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
import pathlib

print(os.path.join('/home', 'file.txt'))
print(pathlib.Path('/home') / 'file.txt')
</code></pre></div></div> <p><strong><em>Getting the parent directory</em></strong></p> <p>dirname() is the function to get parent directory in os, while in pathlib, you can just use Path().parent to get the parent folder.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
import pathlib

# relative path
print(os.path.dirname("source/2.csv"))
# source
print(pathlib.Path("source/2.csv").parent)
# source

# absolute path
print(pathlib.Path("source/2.csv").resolve().parent)
# /Users/&lt;...&gt;/project/source
print(os.path.dirname(os.path.abspath("source/2.csv")))
# /Users/&lt;...&gt;/project/source
</code></pre></div></div>]]></content><author><name></name></author><category term="machinelearning"/><summary type="html"><![CDATA[Using Python as my primary language, but sometimes I really struggle with file handling. Usually, when I read articles, books or just some kind of documents, I try to copy their codes to handle files. One of the reasons is that in first, I didn’t think it was important, because it was merely used to download, and open file. But when I tried to make it by myself, it turned out something different and difficult as well. Their codes are really complex in someways. Thus, in this post, I will try to learn how to handle files.]]></summary></entry><entry><title type="html">Tools for Data Science</title><link href="https://nminhquang380.github.io/blog/2023/tools_for_data_science/" rel="alternate" type="text/html" title="Tools for Data Science"/><published>2023-08-31T10:35:00+00:00</published><updated>2023-08-31T10:35:00+00:00</updated><id>https://nminhquang380.github.io/blog/2023/tools_for_data_science</id><content type="html" xml:base="https://nminhquang380.github.io/blog/2023/tools_for_data_science/"><![CDATA[<h2 id="module-1-overview-of-data-science">Module 1: Overview of Data Science</h2> <ul> <li>The Data Science Task Categories include: <ul> <li>Data Management - storage, management and retrieval of data</li> <li>Data Integration and Transformation - streamline data pipelines and automate data processing tasks</li> <li>Data Visualization - provide graphical representation of data and assist with communicating insights</li> <li>Modelling - enable Building, Deployment, Monitoring and Assessment of Data and Machine Learning models</li> </ul> </li> <li>Data Science Tasks support the following: <ul> <li>Code Asset Management - store &amp; manage code, track changes and allow collaborative development</li> <li>Data Asset Management - organize and manage data, provide access control, and backup assets</li> <li>Development Environments - develop, test and deploy code</li> <li>Execution Environments - provide computational resources and run the code</li> </ul> </li> </ul> <p>The data science ecosystem consists of many open source and commercial options, and include both traditional desktop applications and server-based tools, as well as cloud-based services that can be accessed using web-browsers and mobile interfaces.</p> <p><strong>Data Management Tools</strong>: include Relational Databases, NoSQL Databases, and Big Data platforms:</p> <ul> <li>MySQL, and PostgreSQL are examples of Open Source Relational Database Management Systems (RDBMS), and IBM Db2 and SQL Server are examples of commercial RDBMSes and are also available as Cloud services.</li> <li>MongoDB and Apache Cassandra are examples of NoSQL databases.</li> <li>Apache Hadoop and Apache Spark are used for Big Data analytics.</li> </ul> <p><strong>Data Integration and Transformation Tools</strong>: include Apache Airflow and Apache Kafka.</p> <p><strong>Data Visualization Tools</strong>: include commercial offerings such as Cognos Analytics, Tableau and PowerBI and can be used for building dynamic and interactive dashboards.</p> <p><strong>Code Asset Management Tools</strong>: Git is an essential code asset management tool. GitHub is a popular web-based platform for storing and managing source code. Its features make it an ideal tool for collaborative software development, including version control, issue tracking, and project management.</p> <p><strong>Development Environments</strong>: Popular development environments for Data Science include Jupyter Notebooks and RStudio.</p> <ul> <li>Jupyter Notebooks provides an interactive environment for creating and sharing code, descriptive text, data visualizations, and other computational artifacts in a web-browser based interface.</li> <li>RStudio is an integrated development environment (IDE) designed specifically for working with the R programming language, which is a popular tool for statistical computing and data analysis.</li> </ul> <h2 id="module-2-languages-of-data-science">Module 2: Languages of Data Science</h2> <ul> <li>The popular languages are Python, R, SQL, Scala, Java, C++, and Julia.</li> <li>For data science, you can use Python’s scientific computing libraries like Pandas, NumPy, SciPy, and Matplotlib.</li> <li>Python can also be used for Natural Language Processing (NLP) using the Natural Language Toolkit (NLTK).</li> <li>Python is open source, and R is free software.</li> <li>R language’s array-oriented syntax makes it easier to translate from math to code for learners with no or minimal programming background.</li> <li>Python is open-sourse, while R is free software. They are different.</li> <li>SQL is different from other software development languages because it is a non-procedural language.</li> <li>SQL was designed for managing data in relational databases.</li> <li>If you learn SQL and use it with one database, you can apply your SQL knowledge with many other databases easily.</li> <li>Data science tools built with Java include Weka, Java-ML, Apache MLlib, and Deeplearning4.</li> <li>For data science, popular program built with Scala is Apache Spark which includes Shark, MLlib, GraphX, and Spark Streaming.</li> <li>Programs built for Data Science with JavaScript include TensorFlow.js and R-js.</li> <li>One great application of Julia for Data Science is JuliaDB.</li> </ul> <h2 id="module-3-libraries-apis-datasets-and-models">Module 3: Libraries, APIs, Datasets and Models</h2> <h3 id="libraries-are-a-collection-of-functions-and-methods">Libraries are a collection of functions and methods</h3> <h4 id="python-libraries">Python Libraries:</h4> <ol> <li>Scientifics Computing Libraries: <ul> <li>Pandas (Data Structures &amp; Tools)</li> <li>Numpy (Arrays &amp; Matrices), Pandas on top of NumPy</li> </ul> </li> <li>Visualization: <ul> <li>Matplotlib (plots &amp; Graphs)</li> <li>Seaborn (heat maps, time series, violin plots)</li> </ul> </li> <li>Machine Learning and Deep Learning <ul> <li>Scikit-learn (Machine Learning)</li> <li>Keras (Deep Learning Neural Networks)</li> <li>TensorFlow (low-level framework for large scale)</li> <li>PyTorch (simpler)</li> </ul> </li> </ol> <h4 id="apache-spark">Apache Spark</h4> <blockquote> <blockquote> <p>General-purpose cluster-computing framework: Pandas, Numpy, Sklearn</p> <ul> <li>Scala libraries: <ul> <li>Statistical Visualization: VEGAS</li> <li>Deep learning: Big DL</li> </ul> </li> <li>R libraries: <ul> <li>Visualization: ggplot2</li> </ul> </li> </ul> </blockquote> </blockquote> <h3 id="api">API</h3> <ul> <li>REST APIs (Representational State Transfer APIs) <ul> <li>Allow to communicate through the internet. Also have a set of rules.</li> <li>Enable you to use resources like storage, data, and artificially intelligent algorithms.</li> <li>Use HTTP method.</li> </ul> </li> </ul> <h3 id="dataset">Dataset</h3> <ul> <li>Collection of data</li> <li>Data Structures <ul> <li>Tabular Data (contain number of rows, ex: csv,..)</li> <li>Hierachical data, network data.</li> <li>Raw files.</li> </ul> </li> <li>Private data <ul> <li>Confidential</li> <li>Private or personal infomation</li> <li>Commercially sensitive</li> </ul> </li> <li>Open data <ul> <li>Publicly available</li> <li>Companies</li> <li>Scientific institutions</li> <li>Government</li> </ul> </li> <li>Community Data License Agreement</li> </ul> <h3 id="machine-learning-models">Machine Learning Models</h3> <ul> <li>Types of ML are Supervised, Unsupervised, and Reinforcement.</li> <li>Supervised learning comprises two types of models, regression and classification.</li> <li>Deep learning refers to a general set of models and techniques that loosely emulate the way the human brain solves a wide range of problems.</li> <li>The Model Asset eXchange is a free, open-source repository for ready-to-use and customizable deep-learning microservices.</li> <li>MAX model-serving microservices are built and distributed on GitHub as open-source Docker images.</li> <li>You can use Red Hat OpenShift, a Kubernetes platform, to automate deployment, scaling, and management of microservices.</li> <li>Ml-exchange.org has multiple predefined models.</li> </ul> <h2 id="module-4-jupyter-notebooks-and-jupyterlab">Module 4: Jupyter Notebooks and JupyterLab</h2> <ul> <li>Jupyter Notebooks are used in Data Science for recording experiments and projects.</li> <li>Jupyter Lab is compatible with many files and Data Science languages.</li> <li>There are different ways to install and use Jupyter Notebooks.</li> <li>How to run, delete, and insert a code cell in Jupyter Notebooks.</li> <li>How to run multiple notebooks at the same time.</li> <li>How to present a notebook using a combination of Markdown and code cells.</li> <li>How to shut down your notebook sessions after you have completed your work on them.</li> <li>Jupyter implements a two-process model with a kernel and a client.</li> <li>The notebook server is responsible for saving and loading the notebooks.</li> <li>The kernel executes the cells of code contained in the Notebook.</li> <li>The Jupyter architecture uses the NB convert tool to convert files to other formats.</li> <li>Jupyter implements a two-process model with a kernel and a client.</li> <li>The Notebook server is responsible for saving and loading the notebooks.</li> <li>The Jupyter architecture uses the NB convert tool to convert files to other formats.</li> <li>The Anaconda Navigator GUI can launch multiple applications on a local device.</li> <li>Jupyter environments in the Anaconda Navigator include JupyterLab and VS Code.</li> <li>You can download Jupyter environments separately from the Anaconda Navigator, but they may not be configured properly.</li> <li>The Anaconda Navigator GUI can launch multiple applications.</li> <li>Additional open-source Jupyter environments include JupyterLab, JupyterLite, VS Code, and Google Colaboratory.</li> <li>JupyterLite is a browser-based tool.</li> </ul>]]></content><author><name></name></author><category term="machinelearning"/><summary type="html"><![CDATA[Module 1: Overview of Data Science The Data Science Task Categories include: Data Management - storage, management and retrieval of data Data Integration and Transformation - streamline data pipelines and automate data processing tasks Data Visualization - provide graphical representation of data and assist with communicating insights Modelling - enable Building, Deployment, Monitoring and Assessment of Data and Machine Learning models]]></summary></entry></feed>